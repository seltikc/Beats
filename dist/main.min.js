"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(w,e){function g(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function T(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,a=t.slice,b=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,o=t.indexOf,i={},r=i.toString,m=i.hasOwnProperty,s=m.toString,c=s.call(Object),v={},x=w.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function y(e,t,n){var i,o,r=(n=n||x).createElement("script");if(r.text=e,t)for(i in d)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function h(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?i[r.call(e)]||"object":_typeof(e)}var u="3.6.0",P=function e(t,n){return new e.fn.init(t,n)};function p(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!g(e)&&!T(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}P.fn=P.prototype={jquery:u,constructor:P,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=P.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return P.each(this,e)},map:function(n){return this.pushStack(P.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(P.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(P.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},P.extend=P.fn.extend=function(){var e,t,n,i,o,r=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof r&&(l=r,r=arguments[s]||{},s++),"object"===_typeof(r)||g(r)||(r={}),s===a&&(r=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(l&&n&&(P.isPlainObject(n)||(i=Array.isArray(n)))?(o=r[t],o=i&&!Array.isArray(o)?[]:i||P.isPlainObject(o)?o:{},i=!1,r[t]=P.extend(l,o,n)):void 0!==n&&(r[t]=n));return r},P.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==r.call(e))&&(!(e=n(e))||"function"==typeof(e=m.call(e,"constructor")&&e.constructor)&&s.call(e)===c)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){y(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(p(Object(e))?P.merge(t,"string"==typeof e?[e]:e):l.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!=s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return b(s)},guid:1,support:v}),"function"==typeof Symbol&&(P.fn[Symbol.iterator]=t[Symbol.iterator]),P.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function u(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function p(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function i(){w()}var e,f,y,r,o,h,g,T,S,l,c,w,x,s,P,b,a,d,m,C="sizzle"+ +new Date,v=n.document,A=0,M=0,k=le(),E=le(),H=le(),G=le(),B=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,$=t.push,L=t.push,O=t.slice,N=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",V="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",X="\\["+R+"*("+V+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+V+"))|)"+R+"*\\]",W=":("+V+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",j=new RegExp(R+"+","g"),q=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),z=new RegExp("^"+R+"*,"+R+"*"),_=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),U=new RegExp(R+"|>"),K=new RegExp(W),Y=new RegExp("^"+V+"$"),Q={ID:new RegExp("^#("+V+")"),CLASS:new RegExp("^\\.("+V+")"),TAG:new RegExp("^("+V+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,ee=/^h\d$/i,te=/^[^{]+\{\s*\[native \w/,ne=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,oe=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,se=me(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(t=O.call(v.childNodes),v.childNodes),t[v.childNodes.length].nodeType}catch(e){L={apply:t.length?function(e,t){$.apply(e,O.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(t,e,n,i){var o,r,s,a,l,c,d=e&&e.ownerDocument,u=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==u&&9!==u&&11!==u)return n;if(!i&&(w(e),e=e||x,P)){if(11!==u&&(a=ne.exec(t)))if(c=a[1]){if(9===u){if(!(r=e.getElementById(c)))return n;if(r.id===c)return n.push(r),n}else if(d&&(r=d.getElementById(c))&&m(e,r)&&r.id===c)return n.push(r),n}else{if(a[2])return L.apply(n,e.getElementsByTagName(t)),n;if((c=a[3])&&f.getElementsByClassName&&e.getElementsByClassName)return L.apply(n,e.getElementsByClassName(c)),n}if(f.qsa&&!G[t+" "]&&(!b||!b.test(t))&&(1!==u||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===u&&(U.test(t)||_.test(t))){for((d=ie.test(t)&&ge(e.parentNode)||e)===e&&f.scope||((s=e.getAttribute("id"))?s=s.replace(re,p):e.setAttribute("id",s=C)),o=(l=h(t)).length;o--;)l[o]=(s?"#"+s:":scope")+" "+be(l[o]);c=l.join(",")}try{return L.apply(n,d.querySelectorAll(c)),n}catch(e){G(t,!0)}finally{s===C&&e.removeAttribute("id")}}}return T(t.replace(q,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>y.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ce(e){return e[C]=!0,e}function de(e){var t=x.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function ue(e,t){for(var n=e.split("|"),i=n.length;i--;)y.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(s){return ce(function(r){return r=+r,ce(function(e,t){for(var n,i=s([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},o=ae.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||e&&e.nodeName||"HTML")},w=ae.setDocument=function(e){var t,e=e?e.ownerDocument||e:v;return e!=x&&9===e.nodeType&&e.documentElement&&(s=(x=e).documentElement,P=!o(x),v!=x&&(t=x.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",i,!1):t.attachEvent&&t.attachEvent("onunload",i)),f.scope=de(function(e){return s.appendChild(e).appendChild(x.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=de(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=de(function(e){return e.appendChild(x.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=te.test(x.getElementsByClassName),f.getById=de(function(e){return s.appendChild(e).id=C,!x.getElementsByName||!x.getElementsByName(C).length}),f.getById?(y.filter.ID=function(e){var t=e.replace(oe,u);return function(e){return e.getAttribute("id")===t}},y.find.ID=function(e,t){if(void 0!==t.getElementById&&P){e=t.getElementById(e);return e?[e]:[]}}):(y.filter.ID=function(e){var t=e.replace(oe,u);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},y.find.ID=function(e,t){if(void 0!==t.getElementById&&P){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),y.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},y.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&P)return t.getElementsByClassName(e)},a=[],b=[],(f.qsa=te.test(x.querySelectorAll))&&(de(function(e){var t;s.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&b.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||b.push("\\["+R+"*(?:value|"+F+")"),e.querySelectorAll("[id~="+C+"-]").length||b.push("~="),(t=x.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||b.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||b.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||b.push(".#.+[+~]"),e.querySelectorAll("\\\f"),b.push("[\\r\\n\\f]")}),de(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=x.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&b.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&b.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&b.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),b.push(",.*:")})),(f.matchesSelector=te.test(d=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&de(function(e){f.disconnectedMatch=d.call(e,"*"),d.call(e,"[s!='']:x"),a.push("!=",W)}),b=b.length&&new RegExp(b.join("|")),a=a.length&&new RegExp(a.join("|")),t=te.test(s.compareDocumentPosition),m=t||te.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==x||e.ownerDocument==v&&m(v,e)?-1:t==x||t.ownerDocument==v&&m(v,t)?1:l?N(l,e)-N(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e==x?-1:t==x?1:o?-1:r?1:l?N(l,e)-N(l,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==v?-1:a[i]==v?1:0}),x},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(w(e),f.matchesSelector&&P&&!G[t+" "]&&(!a||!a.test(t))&&(!b||!b.test(t)))try{var n=d.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){G(t,!0)}return 0<ae(t,x,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=x&&w(e),m(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=x&&w(e);var n=y.attrHandle[t.toLowerCase()],n=n&&D.call(y.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==n?n:f.attributes||!P?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ae.escape=function(e){return(e+"").replace(re,p)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],i=0,o=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(B),c){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=ae.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(y=ae.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(oe,u),e[3]=(e[3]||e[4]||e[5]||"").replace(oe,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&K.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(oe,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&k(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(e){e=ae.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===i:"!="===n?e!==i:"^="===n?i&&0===e.indexOf(i):"*="===n?i&&-1<e.indexOf(i):"$="===n?i&&e.slice(-i.length)===i:"~="===n?-1<(" "+e.replace(j," ")+" ").indexOf(i):"|="===n&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,T){var b="nth"!==h.slice(0,3),m="last"!==h.slice(-4),v="of-type"===e;return 1===g&&0===T?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,s,a,l,c=b!=m?"nextSibling":"previousSibling",d=e.parentNode,u=v&&e.nodeName.toLowerCase(),p=!n&&!v,f=!1;if(d){if(b){for(;c;){for(s=e;s=s[c];)if(v?s.nodeName.toLowerCase()===u:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[m?d.firstChild:d.lastChild],m&&p){for(f=(a=(i=(o=(r=(s=d)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===A&&i[1])&&i[2],s=a&&d.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[A,a,f];break}}else if(!1===(f=p?a=(i=(o=(r=(s=e)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===A&&i[1]:f))for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((v?s.nodeName.toLowerCase()!==u:1!==s.nodeType)||!++f||(p&&((o=(r=s[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[A,f]),s!==e)););return(f-=T)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,r){var t,s=y.pseudos[e]||y.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[C]?s(r):1<s.length?(t=[e,e,"",r],y.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=s(e,r),o=i.length;o--;)e[n=N(e,i[o])]=!(t[n]=i[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ce(function(e){var i=[],o=[],a=g(e.replace(q,"$1"));return a[C]?ce(function(e,t,n,i){for(var o,r=a(e,null,i,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,n){return i[0]=e,a(i,null,n,o),i[0]=null,!o.pop()}}),has:ce(function(t){return function(e){return 0<ae(t,e).length}}),contains:ce(function(t){return t=t.replace(oe,u),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ce(function(n){return Y.test(n||"")||ae.error("unsupported lang: "+n),n=n.replace(oe,u).toLowerCase(),function(e){var t;do{if(t=P?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===x.activeElement&&(!x.hasFocus||x.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!y.pseudos.empty(e)},header:function(e){return ee.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=y.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})y.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})y.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function Te(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(s,e,t){var a=e.dir,l=e.next,c=l||a,d=t&&"parentNode"===c,u=M++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var i,o,r=[A,u];if(n){for(;e=e[a];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||d)if(i=(o=e[C]||(e[C]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((o=i[c])&&o[0]===A&&o[1]===u)return r[2]=o[2];if((i[c]=r)[2]=s(e,t,n))return!0}return!1}}function ve(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function ye(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function Se(f,h,g,T,b,e){return T&&!T[C]&&(T=Se(T)),b&&!b[C]&&(b=Se(b,e)),ce(function(e,t,n,i){var o,r,s,a=[],l=[],c=t.length,d=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ae(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!e&&h?d:ye(d,a,f,n,i),p=g?b||(e?f:c||T)?[]:t:u;if(g&&g(u,p,n,i),T)for(o=ye(p,l),T(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(u[l[r]]=s));if(e){if(b||f){if(b){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(u[r]=s);b(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=b?N(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=ye(p===t?p.splice(c,p.length):p),b?b(null,t,p,i):L.apply(t,p)})}function we(T,b){function e(e,t,n,i,o){var r,s,a,l=0,c="0",d=e&&[],u=[],p=S,f=e||v&&y.find.TAG("*",o),h=A+=null==p?1:Math.random()||.1,g=f.length;for(o&&(S=t==x||t||o);c!==g&&null!=(r=f[c]);c++){if(v&&r){for(s=0,t||r.ownerDocument==x||(w(r),n=!P);a=T[s++];)if(a(r,t||x,n)){i.push(r);break}o&&(A=h)}m&&((r=!a&&r)&&l--,e&&d.push(r))}if(l+=c,m&&c!==l){for(s=0;a=b[s++];)a(d,u,t,n);if(e){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=I.call(i));u=ye(u)}L.apply(i,u),o&&!e&&0<u.length&&1<l+b.length&&ae.uniqueSort(i)}return o&&(A=h,S=p),d}var m=0<b.length,v=0<T.length;return m?ce(e):e}return Te.prototype=y.filters=y.pseudos,y.setFilters=new Te,h=ae.tokenize=function(e,t){var n,i,o,r,s,a,l,c=E[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=y.preFilter;s;){for(r in n&&!(i=z.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(q," ")}),s=s.slice(n.length)),y.filter)!(i=Q[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ae.error(e):E(e,a).slice(0)},g=ae.compile=function(e,t){var n,i=[],o=[],r=H[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)((r=function e(t){for(var i,n,o,r=t.length,s=y.relative[t[0].type],a=s||y.relative[" "],l=s?1:0,c=me(function(e){return e===i},a,!0),d=me(function(e){return-1<N(i,e)},a,!0),u=[function(e,t,n){return n=!s&&(n||t!==S)||((i=t).nodeType?c:d)(e,t,n),i=null,n}];l<r;l++)if(n=y.relative[t[l].type])u=[me(ve(u),n)];else{if((n=y.filter[t[l].type].apply(null,t[l].matches))[C]){for(o=++l;o<r&&!y.relative[t[o].type];o++);return Se(1<l&&ve(u),1<l&&be(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(q,"$1"),n,l<o&&e(t.slice(l,o)),o<r&&e(t=t.slice(o)),o<r&&be(t))}u.push(n)}return ve(u)}(t[n]))[C]?i:o).push(r);(r=H(e,we(o,i))).selector=e}return r},T=ae.select=function(e,t,n,i){var o,r,s,a,l,c="function"==typeof e&&e,d=!i&&h(e=c.selector||e);if(n=n||[],1===d.length){if(2<(r=d[0]=d[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&P&&y.relative[r[1].type]){if(!(t=(y.find.ID(s.matches[0].replace(oe,u),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=Q.needsContext.test(e)?0:r.length;o--&&(s=r[o],!y.relative[a=s.type]);)if((l=y.find[a])&&(i=l(s.matches[0].replace(oe,u),ie.test(r[0].type)&&ge(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&be(r)))return L.apply(n,i),n;break}}return(c||g(e,d))(i,t,!P,n,!t||ie.test(e)&&ge(t.parentNode)||t),n},f.sortStable=C.split("").sort(B).join("")===C,f.detectDuplicates=!!c,w(),f.sortDetached=de(function(e){return 1&e.compareDocumentPosition(x.createElement("fieldset"))}),de(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&de(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),de(function(e){return null==e.getAttribute("disabled")})||ue(F,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(t=e.getAttributeNode(t))&&t.specified?t.value:null}),ae}(w);P.find=f,P.expr=f.selectors,P.expr[":"]=P.expr.pseudos,P.uniqueSort=P.unique=f.uniqueSort,P.text=f.getText,P.isXMLDoc=f.isXML,P.contains=f.contains,P.escapeSelector=f.escape;function S(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&P(e).is(n))break;i.push(e)}return i}function C(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var A=P.expr.match.needsContext;function M(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,n,i){return g(n)?P.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?P.grep(e,function(e){return e===n!==i}):"string"!=typeof n?P.grep(e,function(e){return-1<o.call(n,e)!==i}):P.filter(n,e,i)}P.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?P.find.matchesSelector(i,e)?[i]:[]:P.find.matches(e,P.grep(t,function(e){return 1===e.nodeType}))},P.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(P(e).filter(function(){for(t=0;t<i;t++)if(P.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)P.find(e,o[t],n);return 1<i?P.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&A.test(e)?P(e):e||[],!1).length}});var H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(P.fn.init=function(e,t,n){if(!e)return this;if(n=n||G,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(P):P.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:H.exec(e))||!i[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(i[1]){if(t=t instanceof P?t[0]:t,P.merge(this,P.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:x,!0)),k.test(i[1])&&P.isPlainObject(t))for(var i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(e=x.getElementById(i[2]))&&(this[0]=e,this.length=1),this}).prototype=P.fn;var G=P(x),B=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}P.fn.extend({has:function(e){var t=P(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(P.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&P(e);if(!A.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&P.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?P.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(P(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(P.uniqueSort(P.merge(this.get(),P(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),P.each({parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(M(e,"template")&&(e=e.content||e),P.merge([],e.childNodes))}},function(i,o){P.fn[i]=function(e,t){var n=P.map(this,o,e);return(t="Until"!==i.slice(-5)?e:t)&&"string"==typeof t&&(n=P.filter(t,n)),1<this.length&&(D[i]||P.uniqueSort(n),B.test(i)&&n.reverse()),this.pushStack(n)}});var $=/[^\x20\t\r\n\f]+/g;function L(e){return e}function O(e){throw e}function N(e,t,n,i){var o;try{e&&g(o=e.promise)?o.call(e).done(t).fail(n):e&&g(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}P.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},P.each(e.match($)||[],function(e,t){n[t]=!0}),n):P.extend({},i);function o(){for(a=a||i.once,s=r=!0;c.length;d=-1)for(t=c.shift();++d<l.length;)!1===l[d].apply(t[0],t[1])&&i.stopOnFalse&&(d=l.length,t=!1);i.memory||(t=!1),r=!1,a&&(l=t?[]:"")}var r,t,s,a,l=[],c=[],d=-1,u={add:function(){return l&&(t&&!r&&(d=l.length-1,c.push(t)),function n(e){P.each(e,function(e,t){g(t)?i.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!r&&o()),this},remove:function(){return P.each(arguments,function(e,t){for(var n;-1<(n=P.inArray(t,l,n));)l.splice(n,1),n<=d&&d--}),this},has:function(e){return e?-1<P.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||r||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||o()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!s}};return u},P.extend({Deferred:function(e){var r=[["notify","progress",P.Callbacks("memory"),P.Callbacks("memory"),2],["resolve","done",P.Callbacks("once memory"),P.Callbacks("once memory"),0,"resolved"],["reject","fail",P.Callbacks("once memory"),P.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var o=arguments;return P.Deferred(function(i){P.each(r,function(e,t){var n=g(o[t[4]])&&o[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&g(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),o=null}).promise()},then:function(t,n,i){var l=0;function c(o,r,s,a){return function(){function e(){var e,t;if(!(o<l)){if((e=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,g(t)?a?t.call(e,c(l,r,L,a),c(l,r,O,a)):(l++,t.call(e,c(l,r,L,a),c(l,r,O,a),c(l,r,L,r.notifyWith))):(s!==L&&(n=void 0,i=[e]),(a||r.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){P.Deferred.exceptionHook&&P.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(s!==O&&(n=void 0,i=[e]),r.rejectWith(n,i))}};o?t():(P.Deferred.getStackHook&&(t.stackTrace=P.Deferred.getStackHook()),w.setTimeout(t))}}return P.Deferred(function(e){r[0][3].add(c(0,e,g(i)?i:L,e.notifyWith)),r[1][3].add(c(0,e,g(t)?t:L)),r[2][3].add(c(0,e,g(n)?n:O))}).promise()},promise:function(e){return null!=e?P.extend(e,s):s}},a={};return P.each(r,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){o=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=a.call(arguments),s=P.Deferred();if(n<=1&&(N(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||g(r[i]&&r[i].then)))return s.then();for(;i--;)N(r[i],t(i),s.reject);return s.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;P.Deferred.exceptionHook=function(e,t){w.console&&w.console.warn&&e&&F.test(e.name)&&w.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},P.readyException=function(e){w.setTimeout(function(){throw e})};var R=P.Deferred();function V(){x.removeEventListener("DOMContentLoaded",V),w.removeEventListener("load",V),P.ready()}P.fn.ready=function(e){return R.then(e).catch(function(e){P.readyException(e)}),this},P.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--P.readyWait:P.isReady)||(P.isReady=!0)!==e&&0<--P.readyWait||R.resolveWith(x,[P])}}),P.ready.then=R.then,"complete"===x.readyState||"loading"!==x.readyState&&!x.documentElement.doScroll?w.setTimeout(P.ready):(x.addEventListener("DOMContentLoaded",V),w.addEventListener("load",V));function X(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===h(n))for(a in o=!0,n)X(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,g(i)||(s=!0),t=c?s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(P(e),n)}):t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r}var W=/^-ms-/,j=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function z(e){return e.replace(W,"ms-").replace(j,q)}function _(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function U(){this.expando=P.expando+U.uid++}U.uid=1,U.prototype={cache:function(e){var t=e[this.expando];return t||(t={},_(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[z(t)]=n;else for(i in t)o[z(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(z):(t=z(t))in i?[t]:t.match($)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!P.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!P.isEmptyObject(e)}};var K=new U,Y=new U,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var i,o;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Q.test(o)?JSON.parse(o):o)}catch(e){}Y.set(e,t,n)}else n=void 0;return n}P.extend({hasData:function(e){return Y.hasData(e)||K.hasData(e)},data:function(e,t,n){return Y.access(e,t,n)},removeData:function(e,t){Y.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),P.fn.extend({data:function(n,e){var t,i,o,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Y.set(this,n)}):X(this,function(e){var t;return r&&void 0===e?void 0!==(t=Y.get(r,n))||void 0!==(t=J(r,n))?t:void 0:void this.each(function(){Y.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Y.get(r),1===r.nodeType&&!K.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=z(i.slice(5)),J(r,i,o[i]));K.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Y.remove(this,e)})}}),P.extend({queue:function(e,t,n){var i;if(e)return i=K.get(e,t=(t||"fx")+"queue"),n&&(!i||Array.isArray(n)?i=K.access(e,t,P.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=P.queue(e,t),i=n.length,o=n.shift(),r=P._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){P.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:P.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}}),P.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?P.queue(this[0],t):void 0===n?this:this.each(function(){var e=P.queue(this,t,n);P._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&P.dequeue(this,t)})},dequeue:function(e){return this.each(function(){P.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||r.resolveWith(s,[s])}var i,o=1,r=P.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=K.get(s[a],e+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=x.documentElement,oe=function(e){return P.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(oe=function(e){return P.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});function se(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===P.css(e,"display")}function ae(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return P.css(e,t,"")},l=a(),c=n&&n[3]||(P.cssNumber[t]?"":"px"),d=e.nodeType&&(P.cssNumber[t]||"px"!==c&&+l)&&te.exec(P.css(e,t));if(d&&d[3]!==c){for(c=c||d[3],d=+(l/=2)||1;s--;)P.style(e,t,d+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),d/=r;P.style(e,t,(d*=2)+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}var le={};function ce(e,t){for(var n,i,o,r,s,a=[],l=0,c=e.length;l<c;l++)(i=e[l]).style&&(n=i.style.display,t?("none"===n&&(a[l]=K.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&se(i)&&(a[l]=(s=r=void 0,r=(o=i).ownerDocument,s=o.nodeName,(o=le[s])||(r=r.body.appendChild(r.createElement(s)),o=P.css(r,"display"),r.parentNode.removeChild(r),le[s]=o="none"===o?"block":o)))):"none"!==n&&(a[l]="none",K.set(i,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(e[l].style.display=a[l]);return e}P.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?P(this).show():P(this).hide()})}});var de=/^(?:checkbox|radio)$/i,ue=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i;u=x.createDocumentFragment().appendChild(x.createElement("div")),(f=x.createElement("input")).setAttribute("type","radio"),f.setAttribute("checked","checked"),f.setAttribute("name","t"),u.appendChild(f),v.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,u.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!u.cloneNode(!0).lastChild.defaultValue,u.innerHTML="<option></option>",v.option=!!u.lastChild;var fe={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function he(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&M(e,t)?P.merge([e],n):n}function ge(e,t){for(var n=0,i=e.length;n<i;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td,v.option||(fe.optgroup=fe.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function be(e,t,n,i,o){for(var r,s,a,l,c,d=t.createDocumentFragment(),u=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===h(r))P.merge(u,r.nodeType?[r]:r);else if(Te.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(ue.exec(r)||["",""])[1].toLowerCase(),a=fe[a]||fe._default,s.innerHTML=a[1]+P.htmlPrefilter(r)+a[2],c=a[0];c--;)s=s.lastChild;P.merge(u,s.childNodes),(s=d.firstChild).textContent=""}else u.push(t.createTextNode(r));for(d.textContent="",p=0;r=u[p++];)if(i&&-1<P.inArray(r,i))o&&o.push(r);else if(l=oe(r),s=he(d.appendChild(r),"script"),l&&ge(s),n)for(c=0;r=s[c++];)pe.test(r.type||"")&&n.push(r);return d}var me=/^([^.]*)(?:\.(.+)|)/;function ve(){return!0}function ye(){return!1}function Se(e,t){return e===function(){try{return x.activeElement}catch(e){}}()==("focus"===t)}function we(e,t,n,i,o,r){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)we(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ye;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return P().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=P.guid++)),e.each(function(){P.event.add(this,t,o,i,n)})}function xe(e,o,r){r?(K.set(e,o,!1),P.event.add(e,o,{namespace:!1,handler:function(e){var t,n,i=K.get(this,o);if(1&e.isTrigger&&this[o]){if(i.length)(P.event.special[o]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),K.set(this,o,i),t=r(this,o),this[o](),i!==(n=K.get(this,o))||t?K.set(this,o,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else i.length&&(K.set(this,o,{value:P.event.trigger(P.extend(i[0],P.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,o)&&P.event.add(e,o,ve)}P.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,d,u,p,f,h=K.get(t);if(_(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&P.find.matchesSelector(ie,o),n.guid||(n.guid=P.guid++),(a=h.events)||(a=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(e){return void 0!==P&&P.event.triggered!==e.type?P.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match($)||[""]).length;l--;)u=f=(c=me.exec(e[l])||[])[1],p=(c[2]||"").split(".").sort(),u&&(d=P.event.special[u]||{},u=(o?d.delegateType:d.bindType)||u,d=P.event.special[u]||{},c=P.extend({type:u,origType:f,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&P.expr.match.needsContext.test(o),namespace:p.join(".")},r),(f=a[u])||((f=a[u]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(u,s)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,c):f.push(c),P.event.global[u]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,g,T=K.hasData(e)&&K.get(e);if(T&&(l=T.events)){for(c=(t=(t||"").match($)||[""]).length;c--;)if(f=g=(a=me.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=P.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)d=p[r],!o&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,T.handle)||P.removeEvent(e,f,T.handle),delete l[f])}else for(f in l)P.event.remove(e,f+t[c],n,i,!0);P.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s=new Array(arguments.length),a=P.event.fix(e),l=(K.get(this,"events")||Object.create(null))[a.type]||[],e=P.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!e.preDispatch||!1!==e.preDispatch.call(this,a)){for(r=P.event.handlers.call(this,a,l),t=0;(i=r[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(o=((P.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return e.postDispatch&&e.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?-1<P(o,this).index(c):P.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(P.Event.prototype,t,{enumerable:!0,configurable:!0,get:g(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[P.expando]?e:new P.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return de.test(e.type)&&e.click&&M(e,"input")&&xe(e,"click",ve),!1},trigger:function(e){e=this||e;return de.test(e.type)&&e.click&&M(e,"input")&&xe(e,"click"),!0},_default:function(e){e=e.target;return de.test(e.type)&&e.click&&M(e,"input")&&K.get(e,"click")||M(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},P.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},P.Event=function(e,t){if(!(this instanceof P.Event))return new P.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ve:ye,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&P.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[P.expando]=!0},P.Event.prototype={constructor:P.Event,isDefaultPrevented:ye,isPropagationStopped:ye,isImmediatePropagationStopped:ye,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ve,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ve,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ve,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},P.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},P.event.addProp),P.each({focus:"focusin",blur:"focusout"},function(e,t){P.event.special[e]={setup:function(){return xe(this,e,Se),!1},trigger:function(){return xe(this,e),!0},_default:function(){return!0},delegateType:t}}),P.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){P.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||P.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),P.fn.extend({on:function(e,t,n,i){return we(this,e,t,n,i)},one:function(e,t,n,i){return we(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,P(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ye),this.each(function(){P.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var Pe=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return M(e,"table")&&M(11!==t.nodeType?t:t.firstChild,"tr")&&P(e).children("tbody")[0]||e}function ke(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ee(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,i,o,r;if(1===t.nodeType){if(K.hasData(e)&&(r=K.get(e).events))for(o in K.remove(t,"handle events"),r)for(n=0,i=r[o].length;n<i;n++)P.event.add(t,o,r[o][n]);Y.hasData(e)&&(e=Y.access(e),e=P.extend({},e),Y.set(t,e))}}function Ge(n,i,o,r){i=b(i);var e,t,s,a,l,c,d=0,u=n.length,p=u-1,f=i[0],h=g(f);if(h||1<u&&"string"==typeof f&&!v.checkClone&&Ce.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),Ge(t,i,o,r)});if(u&&(t=(e=be(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=P.map(he(e,"script"),ke)).length;d<u;d++)l=e,d!==p&&(l=P.clone(l,!0,!0),a&&P.merge(s,he(l,"script"))),o.call(n[d],l,d);if(a)for(c=s[s.length-1].ownerDocument,P.map(s,Ee),d=0;d<a;d++)l=s[d],pe.test(l.type||"")&&!K.access(l,"globalEval")&&P.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?P._evalUrl&&!l.noModule&&P._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):y(l.textContent.replace(Ae,""),l,c))}return n}function Be(e,t,n){for(var i,o=t?P.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||P.cleanData(he(i)),i.parentNode&&(n&&oe(i)&&ge(he(i,"script")),i.parentNode.removeChild(i));return e}P.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a,l,c,d=e.cloneNode(!0),u=oe(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||P.isXMLDoc(e)))for(s=he(d),i=0,o=(r=he(e)).length;i<o;i++)a=r[i],l=s[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&de.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(r=r||he(e),s=s||he(d),i=0,o=r.length;i<o;i++)He(r[i],s[i]);else He(e,d);return 0<(s=he(d,"script")).length&&ge(s,!u&&he(e,"script")),d},cleanData:function(e){for(var t,n,i,o=P.event.special,r=0;void 0!==(n=e[r]);r++)if(_(n)){if(t=n[K.expando]){if(t.events)for(i in t.events)o[i]?P.event.remove(n,i):P.removeEvent(n,i,t.handle);n[K.expando]=void 0}n[Y.expando]&&(n[Y.expando]=void 0)}}}),P.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return X(this,function(e){return void 0===e?P.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ge(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return Ge(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Me(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ge(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ge(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(P.cleanData(he(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return P.clone(this,e,t)})},html:function(e){return X(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!fe[(ue.exec(e)||["",""])[1].toLowerCase()]){e=P.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(P.cleanData(he(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ge(this,arguments,function(e){var t=this.parentNode;P.inArray(this,n)<0&&(P.cleanData(he(this)),t&&t.replaceChild(e,this))},n)}}),P.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){P.fn[e]=function(e){for(var t,n=[],i=P(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),P(i[r])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function De(e){var t=e.ownerDocument.defaultView;return(t=!t||!t.opener?w:t).getComputedStyle(e)}function Ie(e,t,n){var i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in n=n.call(e),t)e.style[i]=o[i];return n}var $e,Le,Oe,Ne,Fe,Re,Ve,Xe,We=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),je=new RegExp(ne.join("|"),"i");function qe(){var e;Xe&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(Ve).appendChild(Xe),e=w.getComputedStyle(Xe),$e="1%"!==e.top,Re=12===ze(e.marginLeft),Xe.style.right="60%",Ne=36===ze(e.right),Le=36===ze(e.width),Xe.style.position="absolute",Oe=12===ze(Xe.offsetWidth/3),ie.removeChild(Ve),Xe=null)}function ze(e){return Math.round(parseFloat(e))}function _e(e,t,n){var i,o,r=e.style;return(n=n||De(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=P.style(e,t)),!v.pixelBoxStyles()&&We.test(o)&&je.test(t)&&(i=r.width,e=r.minWidth,t=r.maxWidth,r.minWidth=r.maxWidth=r.width=o,o=n.width,r.width=i,r.minWidth=e,r.maxWidth=t)),void 0!==o?o+"":o}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ve=x.createElement("div"),(Xe=x.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Xe.style.backgroundClip,P.extend(v,{boxSizingReliable:function(){return qe(),Le},pixelBoxStyles:function(){return qe(),Ne},pixelPosition:function(){return qe(),$e},reliableMarginLeft:function(){return qe(),Re},scrollboxSize:function(){return qe(),Oe},reliableTrDimensions:function(){var e,t,n;return null==Fe&&(e=x.createElement("table"),t=x.createElement("tr"),n=x.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ie.appendChild(e).appendChild(t).appendChild(n),n=w.getComputedStyle(t),Fe=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,ie.removeChild(e)),Fe}}));var Ke=["Webkit","Moz","ms"],Ye=x.createElement("div").style,Qe={};function Ze(e){var t=P.cssProps[e]||Qe[e];return t||(e in Ye?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in Ye)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function it(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ot(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=P.css(e,n+ne[s],!0,o)),i?("content"===n&&(l-=P.css(e,"padding"+ne[s],!0,o)),"margin"!==n&&(l-=P.css(e,"border"+ne[s]+"Width",!0,o))):(l+=P.css(e,"padding"+ne[s],!0,o),"padding"!==n?l+=P.css(e,"border"+ne[s]+"Width",!0,o):a+=P.css(e,"border"+ne[s]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function rt(e,t,n){var i=De(e),o=(!v.boxSizingReliable()||n)&&"border-box"===P.css(e,"boxSizing",!1,i),r=o,s=_e(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(We.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&M(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===P.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===P.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ot(e,t,n||(o?"border":"content"),r,i,s)+"px"}function st(e,t,n,i,o){return new st.prototype.init(e,t,n,i,o)}P.extend({cssHooks:{opacity:{get:function(e,t){if(t){e=_e(e,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=z(t),l=et.test(t),c=e.style;if(l||(t=Ze(a)),s=P.cssHooks[t]||P.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"===(r=_typeof(n))&&(o=te.exec(n))&&o[1]&&(n=ae(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(P.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r=z(t);return et.test(t)||(t=Ze(r)),"normal"===(o=void 0===(o=(r=P.cssHooks[t]||P.cssHooks[r])&&"get"in r?r.get(e,!0,n):o)?_e(e,t,i):o)&&t in nt&&(o=nt[t]),""===n||n?(t=parseFloat(o),!0===n||isFinite(t)?t||0:o):o}}),P.each(["height","width"],function(e,a){P.cssHooks[a]={get:function(e,t,n){if(t)return!Je.test(P.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,a,n):Ie(e,tt,function(){return rt(e,a,n)})},set:function(e,t,n){var i,o=De(e),r=!v.scrollboxSize()&&"absolute"===o.position,s=(r||n)&&"border-box"===P.css(e,"boxSizing",!1,o),n=n?ot(e,a,n,s,o):0;return s&&r&&(n-=Math.ceil(e["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(o[a])-ot(e,a,"border",!1,o)-.5)),n&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[a]=t,t=P.css(e,a)),it(0,t,n)}}}),P.cssHooks.marginLeft=Ue(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),P.each({margin:"",padding:"",border:"Width"},function(o,r){P.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==o&&(P.cssHooks[o+r].set=it)}),P.fn.extend({css:function(e,t){return X(this,function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=De(e),o=t.length;s<o;s++)r[t[s]]=P.css(e,t[s],!1,i);return r}return void 0!==n?P.style(e,t,n):P.css(e,t)},e,t,1<arguments.length)}}),((P.Tween=st).prototype={constructor:st,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||P.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(P.cssNumber[n]?"":"px")},cur:function(){var e=st.propHooks[this.prop];return(e&&e.get?e:st.propHooks._default).get(this)},run:function(e){var t,n=st.propHooks[this.prop];return this.options.duration?this.pos=t=P.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:st.propHooks._default).set(this),this}}).init.prototype=st.prototype,(st.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=P.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){P.fx.step[e.prop]?P.fx.step[e.prop](e):1!==e.elem.nodeType||!P.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:P.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=st.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},P.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},P.fx=st.prototype.init,P.fx.step={};var at,lt,ct=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function ut(){lt&&(!1===x.hidden&&w.requestAnimationFrame?w.requestAnimationFrame(ut):w.setTimeout(ut,P.fx.interval),P.fx.tick())}function pt(){return w.setTimeout(function(){at=void 0}),at=Date.now()}function ft(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=ne[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ht(e,t,n){for(var i,o=(gt.tweeners[t]||[]).concat(gt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function gt(o,e,t){var n,r,i=0,s=gt.prefilters.length,a=P.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=at||pt(),e=Math.max(0,c.startTime+c.duration-e),t=1-(e/c.duration||0),n=0,i=c.tweens.length;n<i;n++)c.tweens[n].run(t);return a.notifyWith(o,[c,t,e]),t<1&&i?e:(i||a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c]),!1)},c=a.promise({elem:o,props:P.extend({},e),opts:P.extend(!0,{specialEasing:{},easing:P.easing._default},t),originalProperties:e,originalOptions:t,startTime:at||pt(),duration:t.duration,tweens:[],createTween:function(e,t){e=P.Tween(o,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(e),e},stop:function(e){var t=0,n=e?c.tweens.length:0;if(r)return this;for(r=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c,e])):a.rejectWith(o,[c,e]),this}}),d=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=z(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=P.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(d,c.opts.specialEasing);i<s;i++)if(n=gt.prefilters[i].call(c,o,d,c.opts))return g(n.stop)&&(P._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return P.map(d,ht,c),g(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),P.fx.timer(P.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}P.Animation=P.extend(gt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ae(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=g(e)?(t=e,["*"]):e.match($)).length;i<o;i++)n=e[i],gt.tweeners[n]=gt.tweeners[n]||[],gt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,d="width"in t||"height"in t,u=this,p={},f=e.style,h=e.nodeType&&se(e),g=K.get(e,"fxshow");for(i in n.queue||(null==(s=P._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,P.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[i],ct.test(o)){if(delete t[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||P.style(e,i)}if((l=!P.isEmptyObject(t))||!P.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=K.get(e,"display")),"none"===(d=P.css(e,"display"))&&(c?d=c:(ce([e],!0),c=e.style.display||c,d=P.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===P.css(e,"float")&&(l||(u.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=K.access(e,"fxshow",{display:c}),r&&(g.hidden=!h),h&&ce([e],!0),u.done(function(){for(i in h||ce([e]),K.remove(e,"fxshow"),p)P.style(e,i,p[i])})),l=ht(h?g[i]:0,i,u),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?gt.prefilters.unshift(e):gt.prefilters.push(e)}}),P.speed=function(e,t,n){var i=e&&"object"===_typeof(e)?P.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return P.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in P.fx.speeds?i.duration=P.fx.speeds[i.duration]:i.duration=P.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&P.dequeue(this,i.queue)},i},P.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function o(){var e=gt(this,P.extend({},t),s);(r||K.get(this,"finish"))&&e.stop(!0)}var r=P.isEmptyObject(t),s=P.speed(e,n,i);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=P.timers,i=K.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&dt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||P.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=K.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],o=P.timers,r=n?n.length:0;for(t.finish=!0,P.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),P.each(["toggle","show","hide"],function(e,i){var o=P.fn[i];P.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(ft(i,!0),e,t,n)}}),P.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){P.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),P.timers=[],P.fx.tick=function(){var e,t=0,n=P.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||P.fx.stop(),at=void 0},P.fx.timer=function(e){P.timers.push(e),P.fx.start()},P.fx.interval=13,P.fx.start=function(){lt||(lt=!0,ut())},P.fx.stop=function(){lt=null},P.fx.speeds={slow:600,fast:200,_default:400},P.fn.delay=function(i,e){return i=P.fx&&P.fx.speeds[i]||i,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,i);t.stop=function(){w.clearTimeout(n)}})},u=x.createElement("input"),ee=x.createElement("select").appendChild(x.createElement("option")),u.type="checkbox",v.checkOn=""!==u.value,v.optSelected=ee.selected,(u=x.createElement("input")).value="t",u.type="radio",v.radioValue="t"===u.value;var Tt,bt=P.expr.attrHandle;P.fn.extend({attr:function(e,t){return X(this,P.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){P.removeAttr(this,e)})}}),P.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?P.prop(e,t,n):(1===r&&P.isXMLDoc(e)||(o=P.attrHooks[t.toLowerCase()]||(P.expr.match.bool.test(t)?Tt:void 0)),void 0!==n?null===n?void P.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(o&&"get"in o&&null!==(i=o.get(e,t)))&&null==(i=P.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&M(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match($);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),Tt={set:function(e,t,n){return!1===t?P.removeAttr(e,n):e.setAttribute(n,n),n}},P.each(P.expr.match.bool.source.match(/\w+/g),function(e,t){var s=bt[t]||P.find.attr;bt[t]=function(e,t,n){var i,o,r=t.toLowerCase();return n||(o=bt[r],bt[r]=i,i=null!=s(e,t,n)?r:null,bt[r]=o),i}});var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match($)||[]).join(" ")}function St(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match($)||[]}P.fn.extend({prop:function(e,t){return X(this,P.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[P.propFix[e]||e]})}}),P.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&P.isXMLDoc(e)||(t=P.propFix[t]||t,o=P.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=P.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(P.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),P.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){P.propFix[this.toLowerCase()]=this}),P.fn.extend({addClass:function(t){var e,n,i,o,r,s,a=0;if(g(t))return this.each(function(e){P(this).addClass(t.call(this,e,St(this)))});if((e=wt(t)).length)for(;n=this[a++];)if(s=St(n),i=1===n.nodeType&&" "+yt(s)+" "){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s!==(s=yt(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,o,r,s,a=0;if(g(t))return this.each(function(e){P(this).removeClass(t.call(this,e,St(this)))});if(!arguments.length)return this.attr("class","");if((e=wt(t)).length)for(;n=this[a++];)if(s=St(n),i=1===n.nodeType&&" "+yt(s)+" "){for(r=0;o=e[r++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");s!==(s=yt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(o,t){var r=_typeof(o),s="string"===r||Array.isArray(o);return"boolean"==typeof t&&s?t?this.addClass(o):this.removeClass(o):g(o)?this.each(function(e){P(this).toggleClass(o.call(this,e,St(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=P(this),i=wt(o);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==r||((e=St(this))&&K.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==o&&K.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+yt(St(t))+" ").indexOf(i))return!0;return!1}});var xt=/\r/g;P.fn.extend({val:function(t){var n,e,i,o=this[0];return arguments.length?(i=g(t),this.each(function(e){1===this.nodeType&&(null==(e=i?t.call(this,e,P(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=P.map(e,function(e){return null==e?"":e+""})),(n=P.valHooks[this.type]||P.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):o?(n=P.valHooks[o.type]||P.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(o,"value"))?e:"string"==typeof(e=o.value)?e.replace(xt,""):null==e?"":e:void 0}}),P.extend({valHooks:{option:{get:function(e){var t=P.find.attr(e,"value");return null!=t?t:yt(P.text(e))}},select:{get:function(e){for(var t,n=e.options,i=e.selectedIndex,o="select-one"===e.type,r=o?null:[],s=o?i+1:n.length,a=i<0?s:o?i:0;a<s;a++)if(((t=n[a]).selected||a===i)&&!t.disabled&&(!t.parentNode.disabled||!M(t.parentNode,"optgroup"))){if(t=P(t).val(),o)return t;r.push(t)}return r},set:function(e,t){for(var n,i,o=e.options,r=P.makeArray(t),s=o.length;s--;)((i=o[s]).selected=-1<P.inArray(P.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),P.each(["radio","checkbox"],function(){P.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<P.inArray(P(e).val(),t)}},v.checkOn||(P.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in w;function Pt(e){e.stopPropagation()}var Ct=/^(?:focusinfocus|focusoutblur)$/;P.extend(P.event,{trigger:function(e,t,n,i){var o,r,s,a,l,c,d,u=[n||x],p=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[],h=d=r=n=n||x;if(3!==n.nodeType&&8!==n.nodeType&&!Ct.test(p+P.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(e=e[P.expando]?e:new P.Event(p,"object"===_typeof(e)&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:P.makeArray(t,[e]),c=P.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,t))){if(!i&&!c.noBubble&&!T(n)){for(s=c.delegateType||p,Ct.test(s+p)||(h=h.parentNode);h;h=h.parentNode)u.push(h),r=h;r===(n.ownerDocument||x)&&u.push(r.defaultView||r.parentWindow||w)}for(o=0;(h=u[o++])&&!e.isPropagationStopped();)d=h,e.type=1<o?s:c.bindType||p,(l=(K.get(h,"events")||Object.create(null))[e.type]&&K.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&_(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),t)||!_(n)||a&&g(n[p])&&!T(n)&&((r=n[a])&&(n[a]=null),P.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,Pt),n[p](),e.isPropagationStopped()&&d.removeEventListener(p,Pt),P.event.triggered=void 0,r&&(n[a]=r)),e.result}},simulate:function(e,t,n){e=P.extend(new P.Event,n,{type:e,isSimulated:!0});P.event.trigger(e,null,t)}}),P.fn.extend({trigger:function(e,t){return this.each(function(){P.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return P.event.trigger(e,t,n,!0)}}),v.focusin||P.each({focus:"focusin",blur:"focusout"},function(n,i){function o(e){P.event.simulate(i,e.target,P.event.fix(e))}P.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=K.access(e,i);t||e.addEventListener(n,o,!0),K.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=K.access(e,i)-1;t?K.access(e,i,t):(e.removeEventListener(n,o,!0),K.remove(e,i))}}});var At=w.location,Mt={guid:Date.now()},kt=/\?/;P.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new w.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||P.error("Invalid XML: "+(n?P.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var Et=/\[\]$/,Ht=/\r?\n/g,Gt=/^(?:submit|button|image|reset|file)$/i,Bt=/^(?:input|select|textarea|keygen)/i;P.param=function(e,t){function n(e,t){t=g(t)?t():t,o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var i,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!P.isPlainObject(e))P.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,o,r){if(Array.isArray(e))P.each(e,function(e,t){o||Et.test(i)?r(i,t):n(i+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,o,r)});else if(o||"object"!==h(e))r(i,e);else for(var t in e)n(i+"["+t+"]",e[t],o,r)}(i,e[i],t,n);return o.join("&")},P.fn.extend({serialize:function(){return P.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=P.prop(this,"elements");return e?P.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!P(this).is(":disabled")&&Bt.test(this.nodeName)&&!Gt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=P(this).val();return null==n?null:Array.isArray(n)?P.map(n,function(e){return{name:t.name,value:e.replace(Ht,"\r\n")}}):{name:t.name,value:n.replace(Ht,"\r\n")}}).get()}});var Dt=/%20/g,It=/#.*$/,$t=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Nt=/^\/\//,Ft={},Rt={},Vt="*/".concat("*"),Xt=x.createElement("a");function Wt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match($)||[];if(g(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function jt(t,i,o,r){var s={},a=t===Rt;function l(e){var n;return s[e]=!0,P.each(t[e]||[],function(e,t){t=t(i,o,r);return"string"!=typeof t||a||s[t]?a?!(n=t):void 0:(i.dataTypes.unshift(t),l(t),!1)}),n}return l(i.dataTypes[0])||!s["*"]&&l("*")}function qt(e,t){var n,i,o=P.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i=i||{})[n]=t[n]);return i&&P.extend(!0,e,i),e}Xt.href=At.href,P.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":P.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?qt(qt(e,P.ajaxSettings),t):qt(P.ajaxSettings,e)},ajaxPrefilter:Wt(Ft),ajaxTransport:Wt(Rt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0);var l,c,d,n,u,p,f,i,o,h=P.ajaxSetup({},t=t||{}),g=h.context||h,T=h.context&&(g.nodeType||g.jquery)?P(g):P.event,b=P.Deferred(),m=P.Callbacks("once memory"),v=h.statusCode||{},r={},s={},a="canceled",y={readyState:0,getResponseHeader:function(e){var t;if(p){if(!n)for(n={};t=Lt.exec(d);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(e,t){return null==p&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==p&&(h.mimeType=e),this},statusCode:function(e){if(e)if(p)y.always(e[y.status]);else for(var t in e)v[t]=[v[t],e[t]];return this},abort:function(e){e=e||a;return l&&l.abort(e),S(0,e),this}};if(b.promise(y),h.url=((e||h.url||At.href)+"").replace(Nt,At.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match($)||[""],null==h.crossDomain){o=x.createElement("a");try{o.href=h.url,o.href=o.href,h.crossDomain=Xt.protocol+"//"+Xt.host!=o.protocol+"//"+o.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=P.param(h.data,h.traditional)),jt(Ft,h,t,y),p)return y;for(i in(f=P.event&&h.global)&&0==P.active++&&P.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ot.test(h.type),c=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(o=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(kt.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace($t,"$1"),o=(kt.test(c)?"&":"?")+"_="+Mt.guid+++o),h.url=c+o),h.ifModified&&(P.lastModified[c]&&y.setRequestHeader("If-Modified-Since",P.lastModified[c]),P.etag[c]&&y.setRequestHeader("If-None-Match",P.etag[c])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&y.setRequestHeader("Content-Type",h.contentType),y.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Vt+"; q=0.01":""):h.accepts["*"]),h.headers)y.setRequestHeader(i,h.headers[i]);if(h.beforeSend&&(!1===h.beforeSend.call(g,y,h)||p))return y.abort();if(a="abort",m.add(h.complete),y.done(h.success),y.fail(h.error),l=jt(Rt,h,t,y)){if(y.readyState=1,f&&T.trigger("ajaxSend",[y,h]),p)return y;h.async&&0<h.timeout&&(u=w.setTimeout(function(){y.abort("timeout")},h.timeout));try{p=!1,l.send(r,S)}catch(e){if(p)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,n,i){var o,r,s,a=t;p||(p=!0,u&&w.clearTimeout(u),l=void 0,d=i||"",y.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(h,y,n)),!i&&-1<P.inArray("script",h.dataTypes)&&P.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(e,t,n,i){var o,r,s,a,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(h,s,y,i),i?(h.ifModified&&((n=y.getResponseHeader("Last-Modified"))&&(P.lastModified[c]=n),(n=y.getResponseHeader("etag"))&&(P.etag[c]=n)),204===e||"HEAD"===h.type?a="nocontent":304===e?a="notmodified":(a=s.state,o=s.data,i=!(r=s.error))):(r=a,!e&&a||(a="error",e<0&&(e=0))),y.status=e,y.statusText=(t||a)+"",i?b.resolveWith(g,[o,a,y]):b.rejectWith(g,[y,a,r]),y.statusCode(v),v=void 0,f&&T.trigger(i?"ajaxSuccess":"ajaxError",[y,h,i?o:r]),m.fireWith(g,[y,a]),f&&(T.trigger("ajaxComplete",[y,h]),--P.active||P.event.trigger("ajaxStop")))}return y},getJSON:function(e,t,n){return P.get(e,t,n,"json")},getScript:function(e,t){return P.get(e,void 0,t,"script")}}),P.each(["get","post"],function(e,o){P[o]=function(e,t,n,i){return g(t)&&(i=i||n,n=t,t=void 0),P.ajax(P.extend({url:e,type:o,dataType:i,data:t,success:n},P.isPlainObject(e)&&e))}}),P.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),P._evalUrl=function(e,t,n){return P.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){P.globalEval(e,t,n)}})},P.fn.extend({wrapAll:function(e){return this[0]&&(g(e)&&(e=e.call(this[0])),e=P(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return g(n)?this.each(function(e){P(this).wrapInner(n.call(this,e))}):this.each(function(){var e=P(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=g(t);return this.each(function(e){P(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){P(this).replaceWith(this.childNodes)}),this}}),P.expr.pseudos.hidden=function(e){return!P.expr.pseudos.visible(e)},P.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},P.ajaxSettings.xhr=function(){try{return new w.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},_t=P.ajaxSettings.xhr();v.cors=!!_t&&"withCredentials"in _t,v.ajax=_t=!!_t,P.ajaxTransport(function(o){var r,s;if(v.cors||_t&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&w.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),P.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),P.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return P.globalEval(e),e}}}),P.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),P.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=P("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),x.head.appendChild(i[0])},abort:function(){o&&o()}}});var Ut=[],Kt=/(=)\?(?=&|$)|\?\?/;P.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||P.expando+"_"+Mt.guid++;return this[e]=!0,e}}),P.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,s=!1!==e.jsonp&&(Kt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Kt,"$1"+i):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||P.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=w[i],w[i]=function(){r=arguments},n.always(function(){void 0===o?P(w).removeProp(i):w[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(i)),r&&g(o)&&o(r[0]),r=o=void 0}),"script"}),v.createHTMLDocument=((u=x.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===u.childNodes.length),P.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=x.implementation.createHTMLDocument("")).createElement("base")).href=x.location.href,t.head.appendChild(i)):t=x),i=!n&&[],(n=k.exec(e))?[t.createElement(n[1])]:(n=be([e],t,i),i&&i.length&&P(i).remove(),P.merge([],n.childNodes)));var i},P.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return-1<a&&(i=yt(e.slice(a)),e=e.slice(0,a)),g(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(o="POST"),0<s.length&&P.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?P("<div>").append(P.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},P.expr.pseudos.animated=function(t){return P.grep(P.timers,function(e){return t===e.elem}).length},P.offset={setOffset:function(e,t,n){var i,o,r,s,a=P.css(e,"position"),l=P(e),c={};"static"===a&&(e.style.position="relative"),r=l.offset(),i=P.css(e,"top"),s=P.css(e,"left"),s=("absolute"===a||"fixed"===a)&&-1<(i+s).indexOf("auto")?(o=(a=l.position()).top,a.left):(o=parseFloat(i)||0,parseFloat(s)||0),null!=(t=g(t)?t.call(e,n,P.extend({},r)):t).top&&(c.top=t.top-r.top+o),null!=t.left&&(c.left=t.left-r.left+s),"using"in t?t.using.call(e,c):l.css(c)}},P.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){P.offset.setOffset(this,t,e)});var e,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===P.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===P.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=P(e).offset()).top+=P.css(e,"borderTopWidth",!0),o.left+=P.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-P.css(i,"marginTop",!0),left:t.left-o.left-P.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===P.css(e,"position");)e=e.offsetParent;return e||ie})}}),P.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;P.fn[t]=function(e){return X(this,function(e,t,n){var i;return T(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[o]:e[t]:void(i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),P.each(["top","left"],function(e,n){P.cssHooks[n]=Ue(v.pixelPosition,function(e,t){if(t)return t=_e(e,n),We.test(t)?P(e).position()[n]+"px":t})}),P.each({Height:"height",Width:"width"},function(s,a){P.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,r){P.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return X(this,function(e,t,n){var i;return T(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?P.css(e,t,o):P.style(e,t,n,o)},a,n?e:void 0,n)}})}),P.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){P.fn[t]=function(e){return this.on(t,e)}}),P.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),P.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){P.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;P.proxy=function(e,t){var n,i;if("string"==typeof t&&(i=e[t],t=e,e=i),g(e))return n=a.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||P.guid++,i},P.holdReady=function(e){e?P.readyWait++:P.ready(!0)},P.isArray=Array.isArray,P.parseJSON=JSON.parse,P.nodeName=M,P.isFunction=g,P.isWindow=T,P.camelCase=z,P.type=h,P.now=Date.now,P.isNumeric=function(e){var t=P.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},P.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return P});var Qt=w.jQuery,Zt=w.$;return P.noConflict=function(e){return w.$===P&&(w.$=Zt),e&&w.jQuery===P&&(w.jQuery=Qt),P},void 0===e&&(w.jQuery=w.$=P),P}),function(l,s,h,g){var o,r,a,d,t,c,p,u,i,e,n,f,T;function b(e,t){var n,i,o,r=[],s=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},n=(t=e&&e.data?u(e.data.options,t):t).$target||h(e.currentTarget).trigger("blur"),(o=h.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(n)||(r=t.selector?h(t.selector):(i=n.attr("data-fancybox")||"")?(r=e.data?e.data.items:[]).length?r.filter('[data-fancybox="'+i+'"]'):h('[data-fancybox="'+i+'"]'):[n],s=h(r).index(n),(o=h.fancybox.open(r,t,s=s<0?0:s)).$trigger=n))}l.console=l.console||{info:function(e){}},h&&(h.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:h.noop,beforeLoad:h.noop,afterLoad:h.noop,beforeShow:h.noop,afterShow:h.noop,beforeClose:h.noop,afterClose:h.noop,onActivate:h.noop,onDeactivate:h.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},o=h(l),r=h(s),a=0,d=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},c=function(){var e,t=s.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==g)return n[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},u=function(e,t){var n=h.extend(!0,{},e,t);return h.each(t,function(e,t){h.isArray(t)&&(n[e]=t)}),n},h.extend((i=function(e,t,n){var i=this;i.opts=u({index:n},h.fancybox.defaults),h.isPlainObject(t)&&(i.opts=u(i.opts,t)),h.fancybox.isMobile&&(i.opts=u(i.opts,i.opts.mobile)),i.id=i.opts.id||++a,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(e),i.group.length&&i.init()}).prototype,{init:function(){var t,n,i=this,o=i.group[i.currIndex].opts;o.closeExisting&&h.fancybox.close(!0),h("body").addClass("fancybox-active"),!h.fancybox.getInstance()&&!1!==o.hideScrollbar&&!h.fancybox.isMobile&&s.body.scrollHeight>l.innerHeight&&(h("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-s.documentElement.clientWidth)+"px;}</style>"),h("body").addClass("compensate-for-scrollbar")),n="",h.each(o.buttons,function(e,t){n+=o.btnTpl[t]||""}),t=h(i.translate(i,o.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(o.baseClass).data("FancyBox",i).appendTo(o.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===g?e:n[t]})},addContent:function(e){var a=this,e=h.makeArray(e);h.each(e,function(e,t){var n,i,o,r={},s={};h.isPlainObject(t)?s=(r=t).opts||t:"object"===h.type(t)&&h(t).length?(s=(i=h(t)).data()||{},(s=h.extend(!0,{},s,s.options)).$orig=i,r.src=a.opts.src||s.src||i.attr("href"),r.type||r.src||(r.type="inline",r.src=t)):r={type:"html",src:t+""},r.opts=h.extend(!0,{},a.opts,s),h.isArray(s.buttons)&&(r.opts.buttons=s.buttons),h.fancybox.isMobile&&r.opts.mobile&&(r.opts=u(r.opts,r.opts.mobile)),n=r.type||r.opts.type,i=r.src||"",!n&&i&&((s=i.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",r.opts.video.format||(r.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):i.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":i.match(/\.(pdf)((\?|#).*)?$/i)?r=h.extend(!0,r,{contentType:"pdf",opts:{iframe:{preload:!(n="iframe")}}}):"#"===i.charAt(0)&&(n="inline")),n?r.type=n:a.trigger("objectNeedsType",r),r.contentType||(r.contentType=-1<h.inArray(r.type,["html","inline","ajax"])?"html":r.type),r.index=a.group.length,"auto"==r.opts.smallBtn&&(r.opts.smallBtn=-1<h.inArray(r.type,["html","inline","ajax"])),"auto"===r.opts.toolbar&&(r.opts.toolbar=!r.opts.smallBtn),r.$thumb=r.opts.$thumb||null,r.opts.$trigger&&r.index===a.opts.index&&(r.$thumb=r.opts.$trigger.find("img:first"),r.$thumb.length&&(r.opts.$orig=r.opts.$trigger)),r.$thumb&&r.$thumb.length||!r.opts.$orig||(r.$thumb=r.opts.$orig.find("img:first")),r.$thumb&&!r.$thumb.length&&(r.$thumb=null),r.thumb=r.opts.thumb||(r.$thumb?r.$thumb[0].src:null),"function"===h.type(r.opts.caption)&&(r.opts.caption=r.opts.caption.apply(t,[a,r])),"function"===h.type(a.opts.caption)&&(r.opts.caption=a.opts.caption.apply(t,[a,r])),r.opts.caption instanceof h||(r.opts.caption=r.opts.caption===g?"":r.opts.caption+""),"ajax"===r.type&&1<(o=i.split(/\s+/,2)).length&&(r.src=o.shift(),r.opts.filter=o.shift()),r.opts.modal&&(r.opts=h.extend(!0,r.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),a.group.push(r)}),Object.keys(a.slides).length&&(a.updateControls(),(e=a.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(i.requestId&&t(i.requestId),i.requestId=d(function(){i.update(e)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(e)},h.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(h.fancybox?h.fancybox.getInstance():null).current,n=e.keyCode||e.which;if(9!=n){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||h(e.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(e.preventDefault(),void i.close(e)):37===n||38===n?(e.preventDefault(),void i.previous()):39===n||40===n?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,n)}else t.opts.trapFocus&&i.focus(e)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,i){var t,n,o,r,s,a,l,c,d=this,u=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun))return e=parseInt(e,10),!(!(n=(d.current||d).opts.loop)&&(e<0||u<=e))&&(t=d.firstRun=!Object.keys(d.slides).length,r=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,o=d.createSlide(e),1<u&&((n||o.index<u-1)&&d.createSlide(e+1),(n||0<o.index)&&d.createSlide(e-1)),d.current=o,d.currIndex=o.index,d.currPos=o.pos,d.trigger("beforeShow",t),d.updateControls(),o.forcedDuration=g,h.isNumeric(i)?o.forcedDuration=i:i=o.opts[t?"animationDuration":"transitionDuration"],i=parseInt(i,10),e=d.isMoved(o),o.$slide.addClass("fancybox-slide--current"),t?(o.opts.animationEffect&&i&&d.$refs.container.css("transition-duration",i+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(o)):(s=h.fancybox.getTranslate(r.$slide),a=h.fancybox.getTranslate(d.$refs.stage),h.each(d.slides,function(e,t){h.fancybox.stop(t.$slide,!0)}),r.pos!==o.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),e?(c=s.left-(r.pos*s.width+r.pos*r.opts.gutter),h.each(d.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*s.width+t.pos*t.opts.gutter;h.fancybox.setTranslate(t.$slide,{top:0,left:n-a.left+c}),t.pos!==o.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>o.pos?"next":"previous")),p(t.$slide),h.fancybox.animate(t.$slide,{top:0,left:(t.pos-o.pos)*s.width+(t.pos-o.pos)*t.opts.gutter},i,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===d.currPos&&d.complete()})})):i&&o.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+o.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>o.pos?"next":"previous")),h.fancybox.animate(r.$slide,l,i,function(){r.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),o.isLoaded?d.revealContent(o):d.loadSlide(o)),void d.preload("image"))},createSlide:function(e){var t,n=this,i=e%n.group.length;return i=i<0?n.group.length+i:i,!n.slides[e]&&n.group[i]&&(t=h('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[e]=h.extend(!0,{},n.group[i],{pos:e,$slide:t,isLoaded:!1}),n.updateSlide(n.slides[e])),n.slides[e]},scaleToActual:function(e,t,n){var i,o,r,s,a=this,l=a.current,c=l.$content,d=h.fancybox.getTranslate(l.$slide).width,u=h.fancybox.getTranslate(l.$slide).height,p=l.width,f=l.height;a.isAnimating||a.isMoved()||!c||"image"!=l.type||!l.isLoaded||l.hasError||(a.isAnimating=!0,h.fancybox.stop(c),e=e===g?.5*d:e,t=t===g?.5*u:t,(i=h.fancybox.getTranslate(c)).top-=h.fancybox.getTranslate(l.$slide).top,i.left-=h.fancybox.getTranslate(l.$slide).left,r=p/i.width,s=f/i.height,o=.5*d-.5*p,l=.5*u-.5*f,d<p&&(o=0<(o=i.left*r-(e*r-e))?0:o)<d-p&&(o=d-p),u<f&&(l=0<(l=i.top*s-(t*s-t))?0:l)<u-f&&(l=u-f),a.updateCursor(p,f),h.fancybox.animate(c,{top:l,left:o,scaleX:r,scaleY:s},n||366,function(){a.isAnimating=!1}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop())},scaleToFit:function(e){var t=this,n=t.current,i=n.$content;t.isAnimating||t.isMoved()||!i||"image"!=n.type||!n.isLoaded||n.hasError||(t.isAnimating=!0,h.fancybox.stop(i),n=t.getFitPos(n),t.updateCursor(n.width,n.height),h.fancybox.animate(i,{top:n.top,left:n.left,scaleX:n.width/i.width(),scaleY:n.height/i.height()},e||366,function(){t.isAnimating=!1}))},getFitPos:function(e){var t,n,i=e.$content,o=e.$slide,r=e.width||e.opts.width,s=e.height||e.opts.height,a={};return!!(e.isLoaded&&i&&i.length)&&(t=h.fancybox.getTranslate(this.$refs.stage).width,n=h.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(o.css("paddingLeft"))+parseFloat(o.css("paddingRight"))+parseFloat(i.css("marginLeft"))+parseFloat(i.css("marginRight")),n-=parseFloat(o.css("paddingTop"))+parseFloat(o.css("paddingBottom"))+parseFloat(i.css("marginTop"))+parseFloat(i.css("marginBottom")),r&&s||(r=t,s=n),t-.5<(r*=i=Math.min(1,t/r,n/s))&&(r=t),n-.5<(s*=i)&&(s=n),"image"===e.type?(a.top=Math.floor(.5*(n-s))+parseFloat(o.css("paddingTop")),a.left=Math.floor(.5*(t-r))+parseFloat(o.css("paddingLeft"))):"video"===e.contentType&&(r/(e=e.opts.width&&e.opts.height?r/s:e.opts.ratio||16/9)<s?s=r/e:s*e<r&&(r=s*e)),a.width=r,a.height=s,a)},update:function(n){var i=this;h.each(i.slides,function(e,t){i.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,i=e&&e.$content,o=e.width||e.opts.width,r=e.height||e.opts.height,s=e.$slide;n.adjustCaption(e),i&&(o||r||"video"===e.contentType)&&!e.hasError&&(h.fancybox.stop(i),h.fancybox.setTranslate(i,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),s.length&&(s.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",s.get(0).scrollHeight>s.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,i=n.$slide;!t.isClosing&&n&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),h.fancybox.animate(i,{top:0,left:0,opacity:1},e===g?0:e,function(){i.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n=e||this.current;return!!n&&(t=h.fancybox.getTranslate(this.$refs.stage),e=h.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-t.top)||.5<Math.abs(e.left-t.left)))},updateCursor:function(e,t){var n=this,i=n.current,o=n.$refs.container;i&&!n.isClosing&&n.Guestures&&(o.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),t=!!(e=n.canPan(e,t))||n.isZoomable(),o.toggleClass("fancybox-is-zoomable",t),h("[data-fancybox-zoom]").prop("disabled",!t),e?o.addClass("fancybox-can-pan"):t&&("zoom"===i.opts.clickContent||h.isFunction(i.opts.clickContent)&&"zoom"==i.opts.clickContent(i))?o.addClass("fancybox-can-zoomIn"):i.opts.touch&&(i.opts.touch.vertical||1<n.group.length)&&"video"!==i.contentType&&o.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,i=this.current,o=i.$content;return e!==g&&t!==g?n=e<i.width&&t<i.height:o&&(n=(n=h.fancybox.getTranslate(o)).width<i.width&&n.height<i.height),n},canPan:function(e,t){var n=this.current,i=null,o=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(o=this.getFitPos(n),e!==g&&t!==g?i={width:e,height:t}:n.isComplete&&(i=h.fancybox.getTranslate(n.$content)),i&&o&&(o=1.5<Math.abs(i.width-o.width)||1.5<Math.abs(i.height-o.height))),o},loadSlide:function(n){var e,t,i,o=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===o.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":o.setImage(n);break;case"iframe":o.setIframe(n);break;case"html":o.setContent(n,n.src||n.content);break;case"video":o.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":h(n.src).length?o.setContent(n,h(n.src)):o.setError(n);break;case"ajax":o.showLoading(n),i=h.ajax(h.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&o.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&o.setError(n)}})),t.one("onReset",function(){i.abort()});break;default:o.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=h('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=s.createElement("img")).onerror=function(){h(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=h(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,i,o,r=e.opts.srcset||e.opts.image.srcset;if(r){i=l.devicePixelRatio||1,o=l.innerWidth*i,(n=r.split(",").map(function(e){var i={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return i.url=e;n&&(i.value=n,i.postfix=e[e.length-1])}),i})).sort(function(e,t){return e.value-t.value});for(var s=0;s<n.length;s++){var a=n[s];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=i){t=a;break}}(t=!t&&n.length?n[n.length-1]:t)&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=r)}},setBigImage:function(t){var n=this,e=s.createElement("img"),i=h(e);t.$image=i.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<o.width()/o.height()?"100":Math.round(t.width/t.height*100))+"vw"),i.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):e.error&&i.trigger("error")},resolveImageSlideSize:function(e,t,n){var i=parseInt(e.opts.width,10),o=parseInt(e.opts.height,10);e.width=t,e.height=n,0<i&&(e.width=i,e.height=Math.floor(i*n/t)),0<o&&(e.width=Math.floor(o*t/n),e.height=o)},setIframe:function(o){var r,t=this,s=o.opts.iframe,a=o.$slide;o.$content=h('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=r=h(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(o.$content),s.preload?(t.showLoading(o),r.on("load.fb error.fb",function(e){this.isReady=1,o.$slide.trigger("refresh"),t.afterLoad(o)}),a.on("refresh.fb",function(){var e,t=o.$content,n=s.css.width,i=s.css.height;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(a.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===g&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),i===g&&(i=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",i||""),a.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(o),r.attr("src",o.src),a.one("onReset",function(){try{h(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}h(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&h.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof h&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=h("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===h.type(t)&&(t=h("<div>").append(h.trim(t)).contents()),e.opts.filter&&(t=h("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){h(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(h(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),h(t).appendTo(e.$slide),h(t).is("video,audio")&&(h(t).addClass("fancybox-video"),h(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||h(t).attr("width"),e.opts.height=e.opts.height||h(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=h(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=h(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&h('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t=this,n=e||t.current,i=n.opts.caption,o=n.opts.preventCaptionOverlap,r=t.$refs.caption,e=!1;r.toggleClass("fancybox-caption--separate",o),o&&i&&i.length&&(n.pos!==t.currPos?((r=r.clone().appendTo(r.parent())).children().eq(0).empty().html(i),e=r.outerHeight(!0),r.empty().remove()):t.$caption&&(e=t.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",e||""))},adjustLayout:function(e){var t,n,i,o=e||this.current;o.isLoaded&&!0!==o.opts.disableLayoutFix&&(o.$content.css("margin-bottom",""),o.$content.outerHeight()>o.$slide.height()+.5&&(n=o.$slide[0].style["padding-bottom"],i=o.$slide.css("padding-bottom"),0<parseFloat(i)&&(e=o.$slide[0].scrollHeight,o.$slide.css("padding-bottom",0),Math.abs(e-o.$slide[0].scrollHeight)<1&&(t=i),o.$slide.css("padding-bottom",n))),o.$content.css("margin-bottom",t))},revealContent:function(e){var t,n,i,o,r=this,s=e.$slide,a=!1,l=!1,c=r.isMoved(e),d=e.isRevealed;return e.isRevealed=!0,t=e.opts[r.firstRun?"animationEffect":"transitionEffect"],i=e.opts[r.firstRun?"animationDuration":"transitionDuration"],i=parseInt(e.forcedDuration===g?i:e.forcedDuration,10),"zoom"===(t=c||e.pos!==r.currPos||!i?!1:t)&&(e.pos===r.currPos&&i&&"image"===e.type&&!e.hasError&&(l=r.getThumbPos(e))?a=r.getFitPos(e):t="fade"),"zoom"===t?(r.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,(o="auto"==(o=e.opts.zoomOpacity)?.1<Math.abs(e.width/e.height-l.width/l.height):o)&&(l.opacity=.1,a.opacity=1),h.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),p(e.$content),void h.fancybox.animate(e.$content,a,i,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(e),t?(h.fancybox.stop(s),n="fancybox-slide--"+(e.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,s.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),p(s),"image"!==e.type&&e.$content.hide().show(0),void h.fancybox.animate(s,"fancybox-slide--current",i,function(){s.removeClass(n).css({transform:"",opacity:""}),e.pos===r.currPos&&r.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===r.currPos&&r.complete())))},getThumbPos:function(e){var t,n,i,o=e.$thumb;return!!(o&&(n=o[0])&&n.ownerDocument===s&&(h(".fancybox-container").css("pointer-events","none"),i={x:n.getBoundingClientRect().left+n.offsetWidth/2,y:n.getBoundingClientRect().top+n.offsetHeight/2},n=s.elementFromPoint(i.x,i.y)===n,h(".fancybox-container").css("pointer-events",""),n))&&(t=h.fancybox.getTranslate(o),e=parseFloat(o.css("border-top-width")||0),i=parseFloat(o.css("border-right-width")||0),n=parseFloat(o.css("border-bottom-width")||0),o=parseFloat(o.css("border-left-width")||0),n={top:t.top+e,left:t.left+o,width:t.width-i-o,height:t.height-e-n,scaleX:1,scaleY:1},0<t.width&&0<t.height&&n)},complete:function(){var e,n=this,t=n.current,i={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),p(t.$slide),t.$slide.addClass("fancybox-slide--complete"),h.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?i[t.pos]=t:t&&(h.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=i),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n,i=this;i.group.length<2||(n=i.slides[i.currPos+1],(t=i.slides[i.currPos-1])&&t.type===e&&i.loadSlide(t),n&&n.type===e&&i.loadSlide(n))},focus:function(e,t){var n=this,i=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");n.isClosing||((t=(t=!e&&n.current&&n.current.isComplete?n.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):n.$refs.container.find("*:visible")).filter(i).filter(function(){return"hidden"!==h(this).css("visibility")&&!h(this).hasClass("disabled")})).length?(i=t.index(s.activeElement),e&&e.shiftKey?(i<0||0==i)&&(e.preventDefault(),t.eq(t.length-1).trigger("focus")):(i<0||i==t.length-1)&&(e&&e.preventDefault(),t.eq(0).trigger("focus"))):n.$refs.container.trigger("focus"))},activate:function(){var t=this;h(".fancybox-container").each(function(){var e=h(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){l.cleanUp(e)}var i,o,r,s,a,l=this,c=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",e)?(l.isClosing=!1,d(function(){l.update()}),!1):(l.removeEvents(),r=c.$content,i=c.opts.animationEffect,o=h.isNumeric(t)?t:i?c.opts.animationDuration:0,c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?h.fancybox.stop(c.$slide):i=!1,c.$slide.siblings().trigger("onReset").remove(),o&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),l.hideLoading(c),l.hideControls(!0),l.updateCursor(),"zoom"===(i=!("zoom"!==i||r&&o&&"image"===c.type&&!l.isMoved()&&!c.hasError&&(a=l.getThumbPos(c)))?"fade":i)?(h.fancybox.stop(r),t={top:(s=h.fancybox.getTranslate(r)).top,left:s.left,scaleX:s.width/a.width,scaleY:s.height/a.height,width:a.width,height:a.height},(s="auto"==(s=c.opts.zoomOpacity)?.1<Math.abs(c.width/c.height-a.width/a.height):s)&&(a.opacity=0),h.fancybox.setTranslate(r,t),p(r),h.fancybox.animate(r,a,o,n)):i&&o?h.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,o,n):!0===e?setTimeout(n,o):n(),!0))},cleanUp:function(e){var t,n=this,i=n.current.opts.$orig;n.current.$slide.trigger("onReset"),n.$refs.container.empty().remove(),n.trigger("afterClose",e),n.current.opts.backFocus&&(i=i&&i.length&&i.is(":visible")?i:n.$trigger)&&i.length&&(t=l.scrollX,e=l.scrollY,i.trigger("focus"),h("html, body").scrollTop(e).scrollLeft(t)),n.current=null,(n=h.fancybox.getInstance())?n.activate():(h("body").removeClass("fancybox-active compensate-for-scrollbar"),h("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,i=Array.prototype.slice.call(arguments,1),o=this,t=t&&t.opts?t:o.current;if(t?i.unshift(t):t=o,i.unshift(o),!1===(n=h.isFunction(t.opts[e])?t.opts[e].apply(t,i):n))return n;("afterClose"!==e&&o.$refs?o.$refs.container:r).trigger(e+".fb",i)},updateControls:function(){var e=this,t=e.current,n=t.index,i=e.$refs.container,o=e.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(e.$caption=o).children().eq(0).html(r):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),i.find("[data-fancybox-count]").html(e.group.length),i.find("[data-fancybox-index]").html(n+1),i.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),i.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),h(s.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=(e.current||e).opts,n=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),h.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=h('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof i&&("string"===h.type(e)?t[e].apply(t,n):"function"===h.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new i(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(e=s.createElement("div"),l.getComputedStyle&&l.getComputedStyle(e)&&l.getComputedStyle(e).getPropertyValue("transform")&&!(s.documentMode&&s.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",i={};if(e&&t)return t.left===g&&t.top===g||(n=(t.left===g?e.position():t).left+"px, "+(t.top===g?e.position():t).top+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==g&&t.scaleY!==g?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==g&&(n+=" scaleX("+t.scaleX+")"),n.length&&(i.transform=n),t.opacity!==g&&(i.opacity=t.opacity),t.width!==g&&(i.width=t.width),t.height!==g&&(i.height=t.height),e.css(i)},animate:function(t,n,i,o,r){var s,a=this;h.isFunction(i)&&(o=i,i=null),a.stop(t),s=a.getTranslate(t),t.on(c,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(a.stop(t),h.isNumeric(i)&&t.css("transition-duration",""),h.isPlainObject(n)?n.scaleX!==g&&n.scaleY!==g&&a.setTranslate(t,{top:n.top,left:n.left,width:s.width*n.scaleX,height:s.height*n.scaleY,scaleX:1,scaleY:1}):!0!==r&&t.removeClass(n),h.isFunction(o)&&o(e))}),h.isNumeric(i)&&t.css("transition-duration",i+"ms"),h.isPlainObject(n)?(n.scaleX!==g&&n.scaleY!==g&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),h.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(c)},i+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(c),e.off(c).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},h.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?h("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},b):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},b),this},r.on("click.fb-start","[data-fancybox]",b),r.on("click.fb-start","[data-fancybox-trigger]",function(e){h('[data-fancybox="'+h(this).attr("data-fancybox-trigger")+'"]').eq(h(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:h(this)})}),n=".fancybox-button",f="fancybox-focus",T=null,r.on("mousedown mouseup focus blur",n,function(e){switch(e.type){case"mousedown":T=h(this);break;case"mouseup":T=null;break;case"focusin":h(n).removeClass(f),h(this).is(T)||h(this).is("[disabled]")||h(this).addClass(f);break;case"focusout":h(n).removeClass(f)}})))}(window,document,jQuery),function(f){function h(n,e,t){if(n)return"object"===f.type(t=t||"")&&(t=f.param(t,!0)),f.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};f(document).on("objectNeedsType.fb",function(e,t,o){var r,s,a,l,c,d,u=o.src||"",p=!1,n=f.extend(!0,{},i,o.opts.media);f.each(n,function(e,t){if(s=u.match(t.matcher)){if(p=t.type,d=e,c={},t.paramPlace&&s[t.paramPlace]){l=(l="?"==(l=s[t.paramPlace])[0]?l.substring(1):l).split("&");for(var n=0;n<l.length;++n){var i=l[n].split("=",2);2==i.length&&(c[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return a=f.extend(!0,{},t.params,o.opts[e],c),u="function"===f.type(t.url)?t.url.call(this,s,a,o):h(t.url,s,a),r="function"===f.type(t.thumb)?t.thumb.call(this,s,a,o):h(t.thumb,s),"youtube"===e?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===e&&(u=u.replace("&%23","#")),!1}}),p?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=r),"iframe"===p&&(o.opts=f.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(o,{type:p,src:u,origSrc:o.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(o.type=o.opts.defaultType)});var o={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=f.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}};f(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&o.load(n.contentSource)}})}(jQuery),function(d,l,u){function p(e){var t,n=[];for(t in e=(e=e.originalEvent||e||d.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[t].pageX?n.push({x:e[t].pageX,y:e[t].pageY}):e[t].clientX&&n.push({x:e[t].clientX,y:e[t].clientY});return n}function f(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||u.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,i=n.length;t<i;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function h(e){for(var t,n,i,o=!1;;){if(t=e.get(0),n=i=n=void 0,n=d.getComputedStyle(t)["overflow-y"],i=d.getComputedStyle(t)["overflow-x"],n=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,t=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth,o=n||t)break;if(!(e=e.parent()).length||e.hasClass("fancybox-stage")||e.is("body"))break}return o}function n(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",u.proxy(t,"ontouchstart"))}var g=d.requestAnimationFrame||d.webkitRequestAnimationFrame||d.mozRequestAnimationFrame||d.oRequestAnimationFrame||function(e){return d.setTimeout(e,1e3/60)},T=d.cancelAnimationFrame||d.webkitCancelAnimationFrame||d.mozCancelAnimationFrame||d.oCancelAnimationFrame||function(e){d.clearTimeout(e)};n.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),u(l).off(".fb.touch"),e.requestId&&(T(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=u(e.target),i=t.instance,o=i.current,r=o.$slide,s=o.$content,a="touchstart"==e.type;if(a&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&r.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(e.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!o||i.isAnimating||o.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=p(e),t.startPoints.length&&(o.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=s,t.opts=o.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=i.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(r[0].clientWidth),t.canvasHeight=Math.round(r[0].clientHeight),t.contentLastPos=null,t.contentStartPos=u.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=u.fancybox.getTranslate(r),t.stagePos=u.fancybox.getTranslate(i.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,u(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",u.proxy(t,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",u.proxy(t,"ontouchmove")),u.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),u.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=h(n)||h(n.parent()),u.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!o.hasError||(t.canPan?(u.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,u.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-u(d).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-u(d).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=f(t.startPoints[0],t.startPoints[1]))))}},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=p(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=f(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=f(t.newPoints[0],t.startPoints[0],"y"),t.distance=f(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},n.prototype.onSwipe=function(e){var o=this,r=o.instance,t=o.isSwiping,n=o.sliderStartPos.left||0;if(!0!==t)"x"==t&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?n+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?n-=Math.pow(-o.distanceX,.8):n+=o.distanceX),o.sliderLastPos={top:"x"==t?0:o.sliderStartPos.top+o.distanceY,left:n},o.requestId&&(T(o.requestId),o.requestId=null),o.requestId=g(function(){o.sliderLastPos&&(u.each(o.instance.slides,function(e,t){var n=t.pos-o.instance.currPos;u.fancybox.setTranslate(t.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+n*o.canvasWidth+n*t.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(o.distance)){if(o.canTap=!1,r.group.length<2&&o.opts.vertical?o.isSwiping="y":r.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<u(d).width()?o.isSwiping="x":(n=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<n&&n<135?"y":"x"),"y"===o.isSwiping&&u.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);r.isDragging=o.isSwiping,o.startPoints=o.newPoints,u.each(r.slides,function(e,t){var n,i;u.fancybox.stop(t.$slide),n=u.fancybox.getTranslate(t.$slide),i=u.fancybox.getTranslate(r.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===r.current.pos&&(o.sliderStartPos.top=n.top-i.top,o.sliderStartPos.left=n.left-i.left),u.fancybox.setTranslate(t.$slide,{top:n.top-i.top,left:n.left-i.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}},n.prototype.onPan=function(){var e=this;f(e.newPoints[0],e.realPoints[0])<(u.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&T(e.requestId),e.requestId=g(function(){u.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,n=e.canvasHeight,i=e.distanceX,o=e.distanceY,r=e.contentStartPos,s=r.left,a=r.top,l=r.width,c=r.height,d=t<l?s+i:s,u=a+o,e=Math.max(0,.5*t-.5*l),r=Math.max(0,.5*n-.5*c),l=Math.min(t-l,.5*t-.5*l),c=Math.min(n-c,.5*n-.5*c);return 0<i&&e<d&&(d=e-1+Math.pow(-e+s+i,.8)||0),i<0&&d<l&&(d=l+1-Math.pow(l-s-i,.8)||0),0<o&&r<u&&(u=r-1+Math.pow(-r+a+o,.8)||0),{top:u=o<0&&u<c?c+1-Math.pow(c-a-o,.8)||0:u,left:d}},n.prototype.limitPosition=function(e,t,n,i){var o=this.canvasWidth,r=this.canvasHeight;return e=o<n?(e=0<e?0:e)<o-n?o-n:e:Math.max(0,o/2-n/2),{top:t=r<i?(t=0<t?0:t)<r-i?r-i:t:Math.max(0,r/2-i/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,i=t.height,o=t.left,r=t.top,s=f(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,a=Math.floor(n*s),l=Math.floor(i*s),c=(n-a)*e.percentageOfImageAtPinchPointX,t=(i-l)*e.percentageOfImageAtPinchPointY,n=(e.newPoints[0].x+e.newPoints[1].x)/2-u(d).scrollLeft(),i=(e.newPoints[0].y+e.newPoints[1].y)/2-u(d).scrollTop(),n=n-e.centerPointStartX,s={top:r+(t+(i-e.centerPointStartY)),left:o+(c+n),scaleX:s,scaleY:s};e.canTap=!1,e.newWidth=a,e.newHeight=l,e.contentLastPos=s,e.requestId&&T(e.requestId),e.requestId=g(function(){u.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,i=t.isPanning,o=t.isZooming,r=t.isScrolling;if(t.endPoints=p(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),u(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(T(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,i?t.endPanning():o?t.endZooming():t.endSwiping(n,r)},n.prototype.endSwiping=function(e,t){var n=this,i=!1,o=n.instance.group.length,r=Math.abs(n.distanceX),r="x"==e&&1<o&&(130<n.dMs&&10<r||50<r);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(u.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),i=n.instance.close(!0,250)):r&&0<n.distanceX?i=n.instance.previous(300):r&&n.distanceX<0&&(i=n.instance.next(300)),!1!==i||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n=this;n.contentLastPos&&(t=!1===n.opts.momentum||350<n.dMs?(e=n.contentLastPos.left,n.contentLastPos.top):(e=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(t=n.limitPosition(e,t,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,t.height=n.contentStartPos.height,u.fancybox.animate(n.$content,t,366))},n.prototype.endZooming=function(){var e,t,n=this,i=n.instance.current,o=n.newWidth,r=n.newHeight;n.contentLastPos&&(e=n.contentLastPos.left,t=n.contentLastPos.top,u.fancybox.setTranslate(n.$content,{top:t,left:e,width:o,height:r,scaleX:1,scaleY:1}),o<n.canvasWidth&&r<n.canvasHeight?n.instance.scaleToFit(150):o>i.width||r>i.height?n.instance.scaleToActual(n.centerPointStartX,n.centerPointStartY,150):(r=n.limitPosition(e,t,o,r),u.fancybox.animate(n.$content,r,150)))},n.prototype.onTap=function(t){function e(e){if(e=s.opts[e],e=u.isFunction(e)?e.apply(r,[s,t]):e)switch(e){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":1<r.group.length?r.next():r.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(l,c):r.group.length<2&&r.close(i.startEvent))}}var n,i=this,o=u(t.target),r=i.instance,s=r.current,a=t&&p(t)||i.startPoints,l=a[0]?a[0].x-u(d).scrollLeft()-i.stagePos.left:0,c=a[0]?a[0].y-u(d).scrollTop()-i.stagePos.top:0;if((!t.originalEvent||2!=t.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))n="Outside";else if(o.is(".fancybox-slide"))n="Slide";else{if(!r.current.$content||!r.current.$content.find(o).addBack().filter(o).length)return;n="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(c-i.tapY))return this;e("dblclick"+n)}else i.tapX=l,i.tapY=c,s.opts["dblclick"+n]&&s.opts["dblclick"+n]!==s.opts["click"+n]?i.tapped=setTimeout(function(){i.tapped=null,r.isAnimating||e("click"+n)},500):e("click"+n);return this}},u(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(r,s){s.extend(!0,s.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}s.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=s('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,n=t.instance,i=n.current;i&&(!0===e||i.opts.loop||n.currIndex<n.group.length-1)?t.isActive&&"video"!==i.contentType&&(t.$progress&&s.fancybox.animate(t.$progress.show(),{scaleX:1},i.opts.slideShow.speed),t.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},i.opts.slideShow.speed)):(t.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),s(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){t=t&&t.SlideShow;i?t&&n.opts.slideShow.autoStart&&t.start():t&&t.isActive&&t.clear()},"afterShow.fb":function(e,t,n){t=t&&t.SlideShow;t&&t.isActive&&t.set()},"afterKeydown.fb":function(e,t,n,i,o){t=t&&t.SlideShow;!t||!n.opts.slideShow||80!==o&&32!==o||s(r.activeElement).is("button,a,input")||(i.preventDefault(),t.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){t=t&&t.SlideShow;t&&t.stop()}}),s(r).on("visibilitychange",function(){var e=s.fancybox.getInstance(),e=e&&e.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(r,n){var i,o=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var i=e[n];if(i&&i[1]in r){for(var o=0;o<i.length;o++)t[e[0][o]]=i[o];return t}}return!1}();o&&(n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!(i={request:function(e){(e=e||r.documentElement)[o.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){r[o.exitFullscreen]()},toggle:function(e){e=e||r.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(r[o.fullscreenElement])},enabled:function(){return Boolean(r[o.fullscreenEnabled])}})}}),n(r).on(o.fullscreenchange,function(){var e=i.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),n(r).on({"onInit.fb":function(e,t){o?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,i,o){t&&t.FullScreen&&70===o&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(e,r){var s="fancybox-thumbs",a=s+"-active";r.fancybox.defaults=r.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},r.fancybox.defaults);function i(e){this.init(e)}r.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,i=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,r=n.length;o<r&&(n[o].thumb&&i++,!(1<i));o++);1<i&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,i=e.opts.parentEl,o=[];e.$grid||(e.$grid=r('<div class="'+s+" "+s+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(i).addBack().filter(i)),e.$grid.on("click","a",function(){t.jumpTo(r(this).attr("data-index"))})),e.$list||(e.$list=r('<div class="'+s+'__list">').appendTo(e.$grid)),r.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=o.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,i=this,o=i.$list,r=i.$grid;i.instance.current&&(n=(t=o.children().removeClass(a).filter('[data-index="'+i.instance.current.index+'"]').addClass(a)).position(),"y"===i.opts.axis&&(n.top<0||n.top>o.height()-t.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+n.top},e):"x"===i.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-t.outerWidth()))&&o.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),r(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new i(t)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(e,t,n,i){t=t&&t.Thumbs;t&&t.isVisible&&t.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,o){t=t&&t.Thumbs;t&&t.isActive&&71===o&&(i.preventDefault(),t.toggle())},"beforeClose.fb":function(e,t){t=t&&t.Thumbs;t&&t.isVisible&&!1!==t.opts.hideOnClose&&t.$grid.hide()}})}(document,jQuery),function(e,o){o.extend(!0,o.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),o(e).on("click","[data-fancybox-share]",function(){var e,t,n=o.fancybox.getInstance(),i=n.current||null;i&&("function"===o.type(i.opts.share.url)&&(e=i.opts.share.url.apply(i,[n,i])),e=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),o.fancybox.open({src:n.translate(n,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){n.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(r,s,i){function o(){var e=r.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&i("[data-fancybox='"+i.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function a(e){return!!e&&(""!==(e=(e=(e.current||e).opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&e)}i.escapeSelector||(i.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(s).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=o(),(i=a(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,i){var o;n&&!1!==n.opts.hash&&(o=a(t))&&(t.currentHash=o+(1<t.group.length?"-"+(n.index+1):""),r.location.hash!=="#"+t.currentHash&&(i&&!t.origHash&&(t.origHash=r.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in r.history?(r.history[i?"pushState":"replaceState"]({},s.title,r.location.pathname+r.location.search+"#"+t.currentHash),i&&(t.hasCreatedHistory=!0)):r.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?r.history.back():t.currentHash&&("replaceState"in r.history?r.history.replaceState({},s.title,r.location.pathname+r.location.search+(t.origHash||"")):r.location.hash=t.origHash),t.currentHash=null)}}),i(r).on("hashchange.fb",function(){var e=o(),n=null;i.each(i(".fancybox-container").get().reverse(),function(e,t){t=i(t).data("FancyBox");if(t&&t.currentHash)return n=t,!1}),n?n.currentHash===e.gallery+"-"+e.index||1===e.index&&n.currentHash==e.gallery||(n.currentHash=null,n.close()):""!==e.gallery&&t(e)}),setTimeout(function(){i.fancybox.getInstance()||t(o())},50))})}(window,document,jQuery),function(e,t){var o=(new Date).getTime();t(e).on({"onInit.fb":function(e,i,t){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=i.current,n=(new Date).getTime();i.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-o<250||(o=n,i[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(r){(function(){if(typeof module!=="undefined"&&module.exports)return function(e){module.exports=e()};else if(typeof define==="function"&&define.amd)return define;else if(typeof window!=="undefined")return function(e){window.MobileDetect=e()};else throw new Error("unknown environment")})()(function(){var a,l={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",Pixel:"; \\bPixel\\b",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 5X|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F|SM-G610F|SM-G981B|SM-G892A|SM-A530F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533|SOV34|601SO|F8332",Asus:"Asus.*Galaxy|PadFone.*Mobile",Xiaomi:"^(?!.*\\bx11\\b).*xiaomi.*$|POCOPHONE F1|MI 8|Redmi Note 9S|Redmi Note 5A Prime|N2G47H|M2001J2G|M2001J2I|M1805E10A|M2004J11G|M1902F1G|M2002J9G|M2004J19G|M2003J6A1G",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V|SM-P610|SM-T290|SM-T515|SM-T590|SM-T595|SM-T725|SM-T817P|SM-P585N0|SM-T395|SM-T295|SM-T865|SM-P610N|SM-P615|SM-T970|SM-T380|SM-T5950|SM-T905|SM-T231|SM-T500|SM-T860",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30|A3-A40",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X|TB-X704F|TB-X104F|TB3-X70F|TB-X705F|TB-8504F|TB3-X70L|TB3-710F|TB-X704L",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android [0-9.]+; [a-z-]+; \\bG1\\b",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",SailfishOS:"Sailfish",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"\\bEdgiOS\\b|Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version((?!\\bEdgiOS\\b).)*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",SailfishBrowser:"SailfishBrowser/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",Sailfish:"Sailfish [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp|AspiegelBot",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},c=Object.prototype.hasOwnProperty;function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,i,o=e.length;if(!o||!t)return!1;for(n=t.toLowerCase(),i=0;i<o;++i)if(n===e[i].toLowerCase())return!0;return!1}function d(e){for(var t in e)c.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function o(e,t){this.ua=(e||"").substr(0,500),this._cache={},this.maxPhoneWidth=t||600}return l.FALLBACK_PHONE="UnknownPhone",l.FALLBACK_TABLET="UnknownTablet",l.FALLBACK_MOBILE="UnknownMobile",a="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,i,o,r,s=l.mobileDetectRules;for(e in s.props)if(c.call(s.props,e)){for(t=s.props[e],o=(t=!a(t)?[t]:t).length,i=0;i<o;++i)0<=(r=(n=t[i]).indexOf("[VER]"))&&(n=n.substring(0,r)+"([\\w._\\+]+)"+n.substring(r+5)),t[i]=new RegExp(n,"i");s.props[e]=t}d(s.oss),d(s.phones),d(s.tablets),d(s.uas),d(s.utils),s.oss0={WindowsPhoneOS:s.oss.WindowsPhoneOS,WindowsMobileOS:s.oss.WindowsMobileOS}}(),l.findMatch=function(e,t){for(var n in e)if(c.call(e,n)&&e[n].test(t))return n;return null},l.findMatches=function(e,t){var n,i=[];for(n in e)c.call(e,n)&&e[n].test(t)&&i.push(n);return i},l.getVersionStr=function(e,t){var n,i,o,r,s=l.mobileDetectRules.props;if(c.call(s,e))for(o=(n=s[e]).length,i=0;i<o;++i)if(null!==(r=n[i].exec(t)))return r[1];return null},l.getVersion=function(e,t){t=l.getVersionStr(e,t);return t?l.prepareVersionNo(t):NaN},l.prepareVersionNo=function(e){var t=e.split(/[a-z._ \/\-]/i);return 1===t.length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},l.isMobileFallback=function(e){return l.detectMobileBrowsers.fullPattern.test(e)||l.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},l.isTabletFallback=function(e){return l.detectMobileBrowsers.tabletPattern.test(e)},l.prepareDetectionCache=function(e,t,n){if(e.mobile===r){var i=l.findMatch(l.mobileDetectRules.tablets,t);return i?(e.mobile=e.tablet=i,void(e.phone=null)):(i=l.findMatch(l.mobileDetectRules.phones,t))?(e.mobile=e.phone=i,void(e.tablet=null)):void(l.isMobileFallback(t)?(n=o.isPhoneSized(n))===r?(e.mobile=l.FALLBACK_MOBILE,e.tablet=e.phone=null):n?(e.mobile=e.phone=l.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):l.isTabletFallback(t)?(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null)}},l.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},l.detectOS=function(e){return l.findMatch(l.mobileDetectRules.oss0,e)||l.findMatch(l.mobileDetectRules.oss,e)},l.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},o.prototype={constructor:o,mobile:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===r&&(this._cache.userAgent=l.findMatch(l.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===r&&(this._cache.userAgents=l.findMatches(l.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===r&&(this._cache.os=l.detectOS(this.ua)),this._cache.os},version:function(e){return l.getVersion(e,this.ua)},versionStr:function(e){return l.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(l.findMatches(l.mobileDetectRules.utils,this.ua),e)},match:function(e){return(e=!(e instanceof RegExp)?new RegExp(e,"i"):e).test(this.ua)},isPhoneSized:function(e){return o.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===r&&(this._cache.grade=l.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&&window.screen?o.isPhoneSized=function(e){return e<0?r:l.getDeviceSmallerSide()<=e}:o.isPhoneSized=function(){},o._impl=l,o.version="1.4.5 2021-03-13",o})}(),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):"undefined"!=typeof module&&module.exports?e(require("jquery")):e(jQuery)}(function(ae){var le="left",ce="right",de="up",ue="down",pe="in",fe="out",he="none",ge="auto",Te="swipe",be="pinch",me="tap",ve="doubletap",ye="longtap",Se="horizontal",we="vertical",xe="all",Pe=10,Ce="start",Ae="move",Me="end",ke="cancel",Ee="ontouchstart"in window,He=window.navigator.msPointerEnabled&&!window.PointerEvent&&!Ee,Ge=(window.PointerEvent||window.navigator.msPointerEnabled)&&!Ee,Be="TouchSwipe";function i(e,s){var s=ae.extend({},s),t=Ee||Ge||!s.fallbackToMouseEvents,n=t?Ge?He?"MSPointerDown":"pointerdown":"touchstart":"mousedown",i=t?Ge?He?"MSPointerMove":"pointermove":"touchmove":"mousemove",o=t?Ge?He?"MSPointerUp":"pointerup":"touchend":"mouseup",r=!t||Ge?"mouseleave":null,a=Ge?He?"MSPointerCancel":"pointercancel":"touchcancel",l=0,c=null,d=null,u=0,p=0,f=0,h=1,g=0,T=0,b=null,m=ae(e),v="start",y=0,S={},w=0,x=0,P=0,C=0,A=0,M=null,k=null;try{m.on(n,E),m.on(a,B)}catch(e){ae.error("events not supported "+n+","+a+" on jQuery.swipe")}function E(e){if(!0!==m.data(Be+"_intouch")&&!(0<ae(e.target).closest(s.excludedElements,m).length)){var t=e.originalEvent||e;if(!t.pointerType||"mouse"!=t.pointerType||0!=s.fallbackToMouseEvents){var n,i=t.touches,o=i?i[0]:t;return(v=Ce,i?y=i.length:!1!==s.preventDefaultEvents&&e.preventDefault(),T=d=c=null,h=1,g=f=p=u=l=0,(e={})[le]=ne(le),e[ce]=ne(ce),e[de]=ne(de),e[ue]=ne(ue),b=e,Y(),J(0,o),!i||y===s.fingers||s.fingers===xe||X()?(w=se(),2==y&&(J(1,i[1]),p=f=oe(S[0].start,S[1].start)),(s.swipeStatus||s.pinchStatus)&&(n=L(t,v))):n=!1,!1===n)?(L(t,v=ke),n):(s.hold&&(k=setTimeout(ae.proxy(function(){m.trigger("hold",[t.target]),s.hold&&(n=s.hold.call(m,t,t.target))},this),s.longTapThreshold)),Z(!0),null)}}}function H(e){var t,n,i,o,r=e.originalEvent||e;v===Me||v===ke||Q()||(t=ee((n=r.touches)?n[0]:r),x=se(),n&&(y=n.length),s.hold&&clearTimeout(k),v=Ae,2==y&&(0==p?(J(1,n[1]),p=f=oe(S[0].start,S[1].start)):(ee(n[1]),f=oe(S[0].end,S[1].end),S[0].end,S[1].end,T=h<1?fe:pe),h=(f/p*1).toFixed(2),g=Math.abs(p-f)),y===s.fingers||s.fingers===xe||!n||X()?(c=re(t.start,t.end),function(e,t){if(!1!==s.preventDefaultEvents)if(s.allowPageScroll===he)e.preventDefault();else{var n=s.allowPageScroll===ge;switch(t){case le:(s.swipeLeft&&n||!n&&s.allowPageScroll!=Se)&&e.preventDefault();break;case ce:(s.swipeRight&&n||!n&&s.allowPageScroll!=Se)&&e.preventDefault();break;case de:(s.swipeUp&&n||!n&&s.allowPageScroll!=we)&&e.preventDefault();break;case ue:(s.swipeDown&&n||!n&&s.allowPageScroll!=we)&&e.preventDefault()}}}(e,d=re(t.last,t.end)),i=t.start,o=t.end,l=Math.round(Math.sqrt(Math.pow(o.x-i.x,2)+Math.pow(o.y-i.y,2))),u=ie(),n=l,(e=c)!=he&&(n=Math.max(n,te(e)),b[e].distance=n),o=L(r,v),s.triggerOnTouchEnd&&!s.triggerOnTouchLeave||(i=!0,s.triggerOnTouchLeave&&(e={left:(n=(e=ae(e=this)).offset()).left,right:n.left+e.outerWidth(),top:n.top,bottom:n.top+e.outerHeight()},t=t.end,e=e,i=t.x>e.left&&t.x<e.right&&t.y>e.top&&t.y<e.bottom),!s.triggerOnTouchEnd&&i?v=$(Ae):s.triggerOnTouchLeave&&!i&&(v=$(Me)),v!=ke&&v!=Me||L(r,v))):L(r,v=ke),!1===o&&L(r,v=ke))}function G(e){var t,n=e.originalEvent||e,i=n.touches;if(i){if(i.length&&!Q())return t=n,P=se(),C=t.touches.length+1,!0;if(i.length&&Q())return!0}return Q()&&(y=C),x=se(),u=ie(),F()||!N()?L(n,v=ke):s.triggerOnTouchEnd||!1===s.triggerOnTouchEnd&&v===Ae?(!1!==s.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),L(n,v=Me)):!s.triggerOnTouchEnd&&_()?O(n,v=Me,me):v===Ae&&L(n,v=ke),Z(!1),null}function B(){f=p=w=x=y=0,Y(),Z(!(h=1))}function D(e){e=e.originalEvent||e;s.triggerOnTouchLeave&&L(e,v=$(Me))}function I(){m.off(n,E),m.off(a,B),m.off(i,H),m.off(o,G),r&&m.off(r,D),Z(!1)}function $(e){var t=e,n=R(),i=N(),o=F();return!n||o?t=ke:!i||e!=Ae||s.triggerOnTouchEnd&&!s.triggerOnTouchLeave?!i&&e==Me&&s.triggerOnTouchLeave&&(t=ke):t=Me,t}function L(e,t){var n,i=e.touches;return(W()&&j()||j())&&(n=O(e,t,Te)),(V()&&X()||X())&&!1!==n&&(n=O(e,t,be)),K()&&U()&&!1!==n?n=O(e,t,ve):u>s.longTapThreshold&&l<Pe&&s.longTap&&!1!==n?n=O(e,t,ye):1!==y&&Ee||!(isNaN(l)||l<s.threshold)||!_()||!1===n||(n=O(e,t,me)),t===ke&&B(),t===Me&&(i&&i.length||B()),n}function O(e,t,n){var i;if(n==Te){if(m.trigger("swipeStatus",[t,c||null,l||0,u||0,y,S,d]),s.swipeStatus&&!1===(i=s.swipeStatus.call(m,e,t,c||null,l||0,u||0,y,S,d)))return!1;if(t==Me&&W()){if(clearTimeout(M),clearTimeout(k),m.trigger("swipe",[c,l,u,y,S,d]),s.swipe&&!1===(i=s.swipe.call(m,e,c,l,u,y,S,d)))return!1;switch(c){case le:m.trigger("swipeLeft",[c,l,u,y,S,d]),s.swipeLeft&&(i=s.swipeLeft.call(m,e,c,l,u,y,S,d));break;case ce:m.trigger("swipeRight",[c,l,u,y,S,d]),s.swipeRight&&(i=s.swipeRight.call(m,e,c,l,u,y,S,d));break;case de:m.trigger("swipeUp",[c,l,u,y,S,d]),s.swipeUp&&(i=s.swipeUp.call(m,e,c,l,u,y,S,d));break;case ue:m.trigger("swipeDown",[c,l,u,y,S,d]),s.swipeDown&&(i=s.swipeDown.call(m,e,c,l,u,y,S,d))}}}if(n==be){if(m.trigger("pinchStatus",[t,T||null,g||0,u||0,y,h,S]),s.pinchStatus&&!1===(i=s.pinchStatus.call(m,e,t,T||null,g||0,u||0,y,h,S)))return!1;if(t==Me&&V())switch(T){case pe:m.trigger("pinchIn",[T||null,g||0,u||0,y,h,S]),s.pinchIn&&(i=s.pinchIn.call(m,e,T||null,g||0,u||0,y,h,S));break;case fe:m.trigger("pinchOut",[T||null,g||0,u||0,y,h,S]),s.pinchOut&&(i=s.pinchOut.call(m,e,T||null,g||0,u||0,y,h,S))}}return n==me?t!==ke&&t!==Me||(clearTimeout(M),clearTimeout(k),U()&&!K()?(A=se(),M=setTimeout(ae.proxy(function(){A=null,m.trigger("tap",[e.target]),s.tap&&(i=s.tap.call(m,e,e.target))},this),s.doubleTapThreshold)):(A=null,m.trigger("tap",[e.target]),s.tap&&(i=s.tap.call(m,e,e.target)))):n==ve?t!==ke&&t!==Me||(clearTimeout(M),clearTimeout(k),A=null,m.trigger("doubletap",[e.target]),s.doubleTap&&(i=s.doubleTap.call(m,e,e.target))):n==ye&&(t!==ke&&t!==Me||(clearTimeout(M),A=null,m.trigger("longtap",[e.target]),s.longTap&&(i=s.longTap.call(m,e,e.target)))),i}function N(){var e=!0;return e=null!==s.threshold?l>=s.threshold:e}function F(){var e=!1;return e=null!==s.cancelThreshold&&null!==c?te(c)-l>=s.cancelThreshold:e}function R(){var e=!s.maxTimeThreshold||!(u>=s.maxTimeThreshold);return e}function V(){var e=q(),t=z(),n=null===s.pinchThreshold||g>=s.pinchThreshold;return e&&t&&n}function X(){return s.pinchStatus||s.pinchIn||s.pinchOut}function W(){var e=R(),t=N(),n=q(),i=z();return!F()&&i&&n&&t&&e}function j(){return s.swipe||s.swipeStatus||s.swipeLeft||s.swipeRight||s.swipeUp||s.swipeDown}function q(){return y===s.fingers||s.fingers===xe||!Ee}function z(){return 0!==S[0].end.x}function _(){return s.tap}function U(){return!!s.doubleTap}function K(){if(null==A)return!1;var e=se();return U()&&e-A<=s.doubleTapThreshold}function Y(){C=P=0}function Q(){var e=!1;return e=P&&se()-P<=s.fingerReleaseThreshold?!0:e}function Z(e){m&&(!0===e?(m.on(i,H),m.on(o,G),r&&m.on(r,D)):(m.off(i,H,!1),m.off(o,G,!1),r&&m.off(r,D,!1)),m.data(Be+"_intouch",!0===e))}function J(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,S[e]=n}function ee(e){var t=void 0!==e.identifier?e.identifier:0,n=S[t]||null;return(n=null===n?J(t,e):n).last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function te(e){if(b[e])return b[e].distance}function ne(e){return{direction:e,distance:0}}function ie(){return x-w}function oe(e,t){var n=Math.abs(e.x-t.x),t=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+t*t))}function re(e,t){if(i=t,(n=e).x==i.x&&n.y==i.y)return he;var n,i=(i=(n=e).x-t.x,n=t.y-e.y,i=Math.atan2(n,i),i=(i=Math.round(180*i/Math.PI))<0?360-Math.abs(i):i);return i<=45&&0<=i||i<=360&&315<=i?le:135<=i&&i<=225?ce:45<i&&i<135?ue:de}function se(){return(new Date).getTime()}this.enable=function(){return this.disable(),m.on(n,E),m.on(a,B),m},this.disable=function(){return I(),m},this.destroy=function(){I(),m.data(Be,null),m=null},this.option=function(e,t){if("object"===_typeof(e))s=ae.extend(s,e);else if(void 0!==s[e]){if(void 0===t)return s[e];s[e]=t}else{if(!e)return s;ae.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}ae.fn.swipe=function(e){var t=ae(this),n=t.data(Be);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));ae.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"===_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!==_typeof(e)&&e))return function(n){!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=he);void 0!==n.click&&void 0===n.tap&&(n.tap=n.click);n=n||{};return n=ae.extend({},ae.fn.swipe.defaults,n),this.each(function(){var e,t=ae(this);(e=t.data(Be))||(e=new i(this,n),t.data(Be,e))})}.apply(this,arguments);return t},ae.fn.swipe.version="1.6.18",ae.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},ae.fn.swipe.phases={PHASE_START:Ce,PHASE_MOVE:Ae,PHASE_END:Me,PHASE_CANCEL:ke},ae.fn.swipe.directions={LEFT:le,RIGHT:ce,UP:de,DOWN:ue,IN:pe,OUT:fe},ae.fn.swipe.pageScroll={NONE:he,HORIZONTAL:Se,VERTICAL:we,AUTO:ge},ae.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:xe}});var openItems=function(e){var t=e.closest(".team__item"),n=t.find(".team__content"),e=n.find(".team__content-block").height();t.addClass("active"),n.height(e)},closeItem=function(e){var t=e.find(".team__content");e.find(".team__item").removeClass("active"),t.height(0)};$(".team__title").click(function(e){var t=$(e.currentTarget),e=t.closest(".team");t.closest(".team__item").hasClass("active")?closeItem(e):(closeItem(e),openItems(t))});var myForm=document.querySelector("#myForm"),sendButton=document.querySelector("#sendButton"),modalText=document.querySelector(".modal__message"),modslCloseBtn=document.querySelector(".app-submit-btn");function validateForm(e){var t=!0;return validateField(e.elements.name)||(t=!1),validateField(e.elements.phone)||(t=!1),validateField(e.elements.street)||(t=!1),validateField(e.elements.home)||(t=!1),validateField(e.elements.frame)||(t=!1),validateField(e.elements.apartment)||(t=!1),t=!validateField(e.elements.floor)?!1:t}function validateField(e){return e.checkValidity()?!(e.nextElementSibling.textContent=""):(e.nextElementSibling.textContent=e.validationMessage,!1)}modslCloseBtn.addEventListener("click",function(e){e.preventDefault(),$.fancybox.close(),document.body.classList.remove("locked")}),sendButton.addEventListener("click",function(e){var t;e.preventDefault(),validateForm(myForm)&&((e=new FormData).append("name",myForm.elements.name.value),e.append("phone",myForm.elements.phone.value),e.append("street",myForm.elements.street.value),e.append("home",myForm.elements.home.value),e.append("frame",myForm.elements.frame.value),e.append("apartment",myForm.elements.apartment.value),e.append("floor",myForm.elements.floor.value),e.append("comment","ÑÐµÐºÑÑ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ñ"),e.append("to","example@mail.ru"),(t=new XMLHttpRequest).responseType="json",t.open("POST","https://webdev-api.loftschool.com/sendmail"),t.setRequestHeader("X-Requested-Width","XMLHttpRequest"),t.send(e),t.addEventListener("load",function(){document.body.classList.add("locked"),t.response.status?modalText.innerHTML=t.response.message:modalText.innerHTML="ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ°",$.fancybox.open({src:".modal-form",type:"inline"})}))});var myMap,name=document.querySelector("#phone"),home=document.querySelector("#home");phone.addEventListener("keydown",function(e){var t=!1,n=!1,i=!1;(0<=e.key||e.key<=9)&&(t=!0),"ArrowLeft"!=e.key&&"ArrowRight"!=e.key&&"Backspace"!=e.key||(i=!0),"-"!=e.key&&"+"!=e.key&&")"!=e.key&&"("!=e.key||(n=!0),0==t&&0==n&&0==i&&e.preventDefault()}),home.addEventListener("keydown",function(e){var t=!1,n=!1;(0<=e.key||e.key<=9)&&(t=!0),"ArrowLeft"!=e.key&&"ArrowRight"!=e.key&&"Backspace"!=e.key||(n=!0),t||n||e.preventDefault()});var init=function(){myMap=new ymaps.Map("map",{center:[56.901592,60.613736],zoom:11,controls:[]});var t=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"image/marker.svg",iconImageSize:[46,57],iconImageOffset:[-35,-52]});[[56.908728,60.617581],[56.834398,60.625313],[56.861047,60.657507],[56.872368,60.554258]].forEach(function(e){t.add(new ymaps.Placemark(e))}),myMap.geoObjects.add(t),myMap.behaviors.disable("scrollZoom")};ymaps.ready(init);var hamburgerButton=document.querySelector(".hamburger"),menu=document.querySelector(".menu");function toggleMenu(){menu.classList.toggle("overlay--active"),hamburgerButton.classList.toggle("hamburger--active"),document.body.classList.toggle("locked")}hamburgerButton.addEventListener("click",toggleMenu),menu.addEventListener("click",function(e){e.target.classList.contains("menu__link")&&toggleMenu()});var section=$("section"),display=$(".maincontent"),sideMenu=$(".fixed-menu"),menuItems=sideMenu.find(".fixed-menu__item"),detectMobil=new MobileDetect(window.navigator.userAgent),isMobile=detectMobil.mobile();window.isScrollBlocked=!1,section.first().addClass("active");var countSectionPosition=function(e){e*=-100;return isNaN(e)?(console.error("Ð¿ÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½Ðµ Ð²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ Ð² countSectionPosition"),0):e},changeMenuThemeForSection=function(e){var t="fixed-menu--white";"black"==section.eq(e).attr("data-sidemenu-theme")?sideMenu.removeClass(t):sideMenu.addClass(t)},resetActiveClassForItem=function(e,t,n){e.eq(t).addClass(n).siblings().removeClass(n)},performTransition=function(e){var t;window.isScrollBlocked||(window.isScrollBlocked=!0,t=countSectionPosition(e),changeMenuThemeForSection(e),display.css({transform:"translateY(".concat(t,"%)")}),resetActiveClassForItem(section,e,"active"),setTimeout(function(){window.isScrollBlocked=!1,resetActiveClassForItem(menuItems,e,"fixed-menu__item--active")},1300))},viewportScroller=function(){var e=section.filter(".active"),t=e.next(),n=e.prev();return{next:function(){t.length&&performTransition(t.index())},prev:function(){n.length&&performTransition(n.index())}}};$(window).on("wheel",function(e){var t=e.originalEvent.deltaY,e=viewportScroller();0<t&&e.next(),t<0&&e.prev()}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase(),t="input"===t||"textarea"===t,n=viewportScroller();if(!t)switch(e.keyCode){case 38:n.prev();break;case 40:n.next()}}),$(".wrapper").on("touchmove",function(e){return e.preventDefault()}),$("[data-scroll-to]").click(function(e){e.preventDefault();e=$(e.currentTarget).attr("data-scroll-to"),e=$("[data-section-id=".concat(e,"]"));performTransition(e.index())}),isMobile&&$("body").swipe({swipe:function(e,t){viewportScroller()["down"===t?"prev":"up"===t?"next":""]()}});var mesureWidth=function(e){var t=0,n=$(window).width(),i=e.closest(".product-menu").find(".product-menu__title"),o=i.width()*i.length,r=window.matchMedia("(max-width: 768px)").matches,s=window.matchMedia("(max-width: 480px)").matches,a=e.find(".product-menu__container"),e=parseInt(a.css("padding-left")),a=parseInt(a.css("padding-right"));return r&&(t=n-o),s&&(t=n-i.width()),{container:t=!r&&!s?524:t,textContainer:t-a-e}},closeEveryItemInContainer=function(e){var t=e.find(".product-menu-item"),e=e.find(".product-menu__content");t.removeClass("active"),e.width(0)},openItem=function(e){var t=e.find(".product-menu__content"),n=mesureWidth(e),i=e.find(".product-menu__container");e.addClass("active"),t.width(n.container),i.width(n.textContainer)};$(".product-menu__title ").on("click",function(e){e.preventDefault();var t=$(e.currentTarget),n=t.closest(".product-menu-item"),e=n.hasClass("active"),t=t.closest(".product-menu");e?closeEveryItemInContainer(t):(closeEveryItemInContainer(t),openItem(n))}),$(".product-menu__close").on("click",function(e){e.preventDefault(),closeEveryItemInContainer($(".product-menu"))});var video,durationControl,soundControl,intervalId,findeBlock=function(n){return $(".reviews__displat-item").filter(function(e,t){return $(t).attr("data-linked-with")===n})};$(".interactive-avatar-link").click(function(e){e.preventDefault();var t=$(e.currentTarget),e=t.attr("data-open"),e=findeBlock(e),t=t.closest(".reviews__switcher-item");e.addClass("reviews__displat-item--active").siblings().removeClass("reviews__displat-item--active"),t.addClass("interactive-avatar--active").siblings().removeClass("interactive-avatar--active")}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){var i,r=window.Slick||{};i=0,(r=function(e,t){var n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(e),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,e=c(e).data("slick")||{},n.options=c.extend({},n.defaults,t,e),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=i++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(e,t,n){var i=this;if("boolean"==typeof t)n=t,t=null;else if(t<0||t>=i.slideCount)return!1;i.unload(),"number"==typeof t?0===t&&0===i.$slides.length?c(e).appendTo(i.$slideTrack):n?c(e).insertBefore(i.$slides.eq(t)):c(e).insertAfter(i.$slides.eq(t)):!0===n?c(e).prependTo(i.$slideTrack):c(e).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),i.$slidesCache=i.$slides,i.reinit()},r.prototype.animateHeight=function(){var e,t=this;1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical&&(e=t.$slides.eq(t.currentSlide).outerHeight(!0),t.$list.animate({height:e},t.options.speed))},r.prototype.animateSlide=function(e,t){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(e=-e),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:e},i.options.speed,i.options.easing,t):i.$slideTrack.animate({top:e},i.options.speed,i.options.easing,t):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:e},{duration:i.options.speed,easing:i.options.easing,step:function(e){e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate("+e+"px, 0px)":n[i.animType]="translate(0px,"+e+"px)",i.$slideTrack.css(n)},complete:function(){t&&t.call()}})):(i.applyTransition(),e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate3d("+e+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+e+"px, 0px)",i.$slideTrack.css(n),t&&setTimeout(function(){i.disableTransition(),t.call()},i.options.speed))},r.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e=e&&null!==e?c(e).not(this.$slider):e},r.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==_typeof(e)&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},r.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,(!1===t.options.fade?t.$slideTrack:t.$slides.eq(e)).css(n)},r.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},r.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var e,t,n=this;if(!0===n.options.dots){for(n.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)t.append(c("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=t.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},r.prototype.buildRows=function(){var e,t,n,i=this,o=document.createDocumentFragment(),r=i.$slider.children();if(1<i.options.rows){for(n=i.options.slidesPerRow*i.options.rows,t=Math.ceil(r.length/n),e=0;e<t;e++){for(var s=document.createElement("div"),a=0;a<i.options.rows;a++){for(var l=document.createElement("div"),c=0;c<i.options.slidesPerRow;c++){var d=e*n+(a*i.options.slidesPerRow+c);r.get(d)&&l.appendChild(r.get(d))}s.appendChild(l)}o.appendChild(s)}i.$slider.empty().append(o),i.$slider.children().children().children().css({width:100/i.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(e,t){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint&&i===r.activeBreakpoint&&!t||(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=i),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},r.prototype.changeSlide=function(e,t){var n,i=this,o=c(e.currentTarget);switch(o.is("a")&&e.preventDefault(),o.is("li")||(o=o.closest("li")),n=i.slideCount%i.options.slidesToScroll!=0?0:(i.slideCount-i.currentSlide)%i.options.slidesToScroll,e.data.message){case"previous":r=0==n?i.options.slidesToScroll:i.options.slidesToShow-n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide-r,!1,t);break;case"next":r=0==n?i.options.slidesToScroll:n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide+r,!1,t);break;case"index":var r=0===e.data.index?0:e.data.index||o.index()*i.options.slidesToScroll;i.slideHandler(i.checkNavigable(r),!1,t),o.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(e){var t=this.getNavigableIndexes(),n=0;if(e>t[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},r.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},r.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.cleanUpRows=function(){var e;1<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},r.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},r.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(e)).css(t)},r.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},r.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){null!==e&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(e).appendTo(this.$slideTrack),this.reinit())},r.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=t.is(":focus"),n.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},r.prototype.getLeft=function(e){var t,n,i=this,o=0;return i.slideOffset=0,t=i.$slides.first().outerHeight(!0),!0===i.options.infinite?(i.slideCount>i.options.slidesToShow&&(i.slideOffset=i.slideWidth*i.options.slidesToShow*-1,n=-1,!0===i.options.vertical&&!0===i.options.centerMode&&(2===i.options.slidesToShow?n=-1.5:1===i.options.slidesToShow&&(n=-2)),o=t*i.options.slidesToShow*n),i.slideCount%i.options.slidesToScroll!=0&&e+i.options.slidesToScroll>i.slideCount&&i.slideCount>i.options.slidesToShow&&(o=e>i.slideCount?(i.slideOffset=(i.options.slidesToShow-(e-i.slideCount))*i.slideWidth*-1,(i.options.slidesToShow-(e-i.slideCount))*t*-1):(i.slideOffset=i.slideCount%i.options.slidesToScroll*i.slideWidth*-1,i.slideCount%i.options.slidesToScroll*t*-1))):e+i.options.slidesToShow>i.slideCount&&(i.slideOffset=(e+i.options.slidesToShow-i.slideCount)*i.slideWidth,o=(e+i.options.slidesToShow-i.slideCount)*t),i.slideCount<=i.options.slidesToShow&&(o=i.slideOffset=0),!0===i.options.centerMode&&i.slideCount<=i.options.slidesToShow?i.slideOffset=i.slideWidth*Math.floor(i.options.slidesToShow)/2-i.slideWidth*i.slideCount/2:!0===i.options.centerMode&&!0===i.options.infinite?i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)-i.slideWidth:!0===i.options.centerMode&&(i.slideOffset=0,i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)),t=!1===i.options.vertical?e*i.slideWidth*-1+i.slideOffset:e*t*-1+o,!0===i.options.variableWidth&&(o=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(e):i.$slideTrack.children(".slick-slide").eq(e+i.options.slidesToShow),t=!0===i.options.rtl?o[0]?-1*(i.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===i.options.centerMode&&(o=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(e):i.$slideTrack.children(".slick-slide").eq(e+i.options.slidesToShow+1),t=!0===i.options.rtl?o[0]?-1*(i.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,t+=(i.$list.width()-o.outerWidth())/2)),t},r.prototype.getOption=r.prototype.slickGetOption=function(e){return this.options[e]},r.prototype.getNavigableIndexes=function(){for(var e=this,t=0,n=0,i=[],o=!1===e.options.infinite?e.slideCount:(t=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,2*e.slideCount);t<o;)i.push(t),t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return i},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var n,i=this,o=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0;return!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-o+c(t).outerWidth()/2>-1*i.swipeLeft)return n=t,!1}),Math.abs(c(n).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},r.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},r.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(e){return 0<=e&&e<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+e,tabindex:-1}),-1!==t&&c(this).attr({"aria-describedby":"slick-slide-control"+n.instanceUid+t})}),n.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+e,"aria-controls":"slick-slide"+n.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=n.currentSlide,t=e+n.options.slidesToShow;e<t;e++)n.$slides.eq(e).attr("tabindex",0);n.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",c.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",c.proxy(this.interrupt,this,!1)))},r.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},r.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},r.prototype.keyHandler=function(e){e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){function e(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),i&&e.attr("sizes",i)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}var t,n,i,r=this;if(!0===r.options.centerMode?i=!0===r.options.infinite?(n=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(n=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(n=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(n+r.options.slidesToShow),!0===r.options.fade&&(0<n&&n--,i<=r.slideCount&&i++)),t=r.$slider.find(".slick-slide").slice(n,i),"anticipated"===r.options.lazyLoad)for(var o=n-1,s=i,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(s)),o--,s++;e(t),r.slideCount<=r.options.slidesToShow?e(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?e(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&e(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},r.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},r.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(e){e=e||1;var t,n,i,o,r=this,s=c("img[data-lazy]",r.$slider);s.length?(t=s.first(),n=t.attr("data-lazy"),i=t.attr("data-srcset"),o=t.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,t,n]),r.progressiveLazyLoad()},s.onerror=function(){e<3?setTimeout(function(){r.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,n]),r.progressiveLazyLoad())},s.src=n):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(e){var t=this,n=t.slideCount-t.options.slidesToShow;!t.options.infinite&&t.currentSlide>n&&(t.currentSlide=n),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),n=t.currentSlide,t.destroy(!0),c.extend(t,t.initials,{currentSlide:n}),t.init(),e||t.changeSlide({data:{message:"index",index:n}},!1)},r.prototype.registerBreakpoints=function(){var e,t,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(e in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===t&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(t),i.breakpointSettings[t]=o[e].settings}i.breakpoints.sort(function(e,t){return i.options.mobileFirst?e-t:t-e})}},r.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},r.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),(!0===n?i.$slideTrack.children():i.$slideTrack.children(this.options.slide).eq(e)).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},r.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+t+", "+n+")":o[i.animType]="translate3d("+t+", "+n+", 0px)"),i.$slideTrack.css(o)},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},r.prototype.setFade=function(){var n,i=this;i.$slides.each(function(e,t){n=i.slideWidth*e*-1,!0===i.options.rtl?c(t).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var e;1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical&&(e=this.$slides.eq(this.currentSlide).outerHeight(!0),this.$list.css("height",e))},r.prototype.setOption=r.prototype.slickSetOption=function(){var e,t,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[0],i=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===i[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(i[t])}s&&(r.unload(),r.reinit())},r.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},r.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var t,n,i,o=this,r=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");o.$slides.eq(e).addClass("slick-current"),!0===o.options.centerMode?(n=o.options.slidesToShow%2==0?1:0,i=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(i<=e&&e<=o.slideCount-1-i?o.$slides.slice(e-i+n,e+i+1).addClass("slick-active").attr("aria-hidden","false"):(t=o.options.slidesToShow+e,r.slice(t-i+1+n,t+i+2).addClass("slick-active").attr("aria-hidden","false")),0===e?r.eq(r.length-1-o.options.slidesToShow).addClass("slick-center"):e===o.slideCount-1&&r.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(e).addClass("slick-center")):0<=e&&e<=o.slideCount-o.options.slidesToShow?o.$slides.slice(e,e+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):r.length<=o.options.slidesToShow?r.addClass("slick-active").attr("aria-hidden","false"):(i=o.slideCount%o.options.slidesToShow,t=!0===o.options.infinite?o.options.slidesToShow+e:e,(o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-e<o.options.slidesToShow?r.slice(t-(o.options.slidesToShow-i),t+i):r.slice(t,t+o.options.slidesToShow)).addClass("slick-active").attr("aria-hidden","false")),"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},r.prototype.setupInfinite=function(){var e,t,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(t=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,e=i.slideCount;e>i.slideCount-n;--e)c(i.$slides[t=e-1]).clone(!0).attr("id","").attr("data-slick-index",t-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(e=0;e<n+i.slideCount;e+=1)t=e,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},r.prototype.selectHandler=function(e){var e=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),e=(e=parseInt(e.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(e,!1,!0):this.slideHandler(e)},r.prototype.slideHandler=function(e,t,n){var i,o,r,s,a=this;if(t=t||!1,!(!0===a.animating&&!0===a.options.waitForAnimate||!0===a.options.fade&&a.currentSlide===e))if(!1===t&&a.asNavFor(e),i=e,s=a.getLeft(i),t=a.getLeft(a.currentSlide),a.currentLeft=null===a.swipeLeft?t:a.swipeLeft,!1===a.options.infinite&&!1===a.options.centerMode&&(e<0||e>a.getDotCount()*a.options.slidesToScroll))!1===a.options.fade&&(i=a.currentSlide,!0!==n?a.animateSlide(t,function(){a.postSlide(i)}):a.postSlide(i));else if(!1===a.options.infinite&&!0===a.options.centerMode&&(e<0||e>a.slideCount-a.options.slidesToScroll))!1===a.options.fade&&(i=a.currentSlide,!0!==n?a.animateSlide(t,function(){a.postSlide(i)}):a.postSlide(i));else{if(a.options.autoplay&&clearInterval(a.autoPlayTimer),o=i<0?a.slideCount%a.options.slidesToScroll!=0?a.slideCount-a.slideCount%a.options.slidesToScroll:a.slideCount+i:i>=a.slideCount?a.slideCount%a.options.slidesToScroll!=0?0:i-a.slideCount:i,a.animating=!0,a.$slider.trigger("beforeChange",[a,a.currentSlide,o]),t=a.currentSlide,a.currentSlide=o,a.setSlideClasses(a.currentSlide),a.options.asNavFor&&(r=(r=a.getNavTarget()).slick("getSlick")).slideCount<=r.options.slidesToShow&&r.setSlideClasses(a.currentSlide),a.updateDots(),a.updateArrows(),!0===a.options.fade)return!0!==n?(a.fadeSlideOut(t),a.fadeSlide(o,function(){a.postSlide(o)})):a.postSlide(o),void a.animateHeight();!0!==n?a.animateSlide(s,function(){a.postSlide(o)}):a.postSlide(o)}},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e=this.touchObject.startX-this.touchObject.curX,t=this.touchObject.startY-this.touchObject.curY,e=Math.atan2(t,e);return(e=(e=Math.round(180*e/Math.PI))<0?360-Math.abs(e):e)<=45&&0<=e||e<=360&&315<=e?!1===this.options.rtl?"left":"right":135<=e&&e<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?35<=e&&e<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},r.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},r.prototype.swipeMove=function(e){var t,n,i=this,o=void 0!==e.originalEvent?e.originalEvent.touches:null;return!(!i.dragging||i.scrolling||o&&1!==o.length)&&(t=i.getLeft(i.currentSlide),i.touchObject.curX=void 0!==o?o[0].pageX:e.clientX,i.touchObject.curY=void 0!==o?o[0].pageY:e.clientY,i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curX-i.touchObject.startX,2))),n=Math.round(Math.sqrt(Math.pow(i.touchObject.curY-i.touchObject.startY,2))),!i.options.verticalSwiping&&!i.swiping&&4<n?!(i.scrolling=!0):(!0===i.options.verticalSwiping&&(i.touchObject.swipeLength=n),o=i.swipeDirection(),void 0!==e.originalEvent&&4<i.touchObject.swipeLength&&(i.swiping=!0,e.preventDefault()),n=(!1===i.options.rtl?1:-1)*(i.touchObject.curX>i.touchObject.startX?1:-1),!0===i.options.verticalSwiping&&(n=i.touchObject.curY>i.touchObject.startY?1:-1),e=i.touchObject.swipeLength,(i.touchObject.edgeHit=!1)===i.options.infinite&&(0===i.currentSlide&&"right"===o||i.currentSlide>=i.getDotCount()&&"left"===o)&&(e=i.touchObject.swipeLength*i.options.edgeFriction,i.touchObject.edgeHit=!0),!1===i.options.vertical?i.swipeLeft=t+e*n:i.swipeLeft=t+e*(i.$list.height()/i.listWidth)*n,!0===i.options.verticalSwiping&&(i.swipeLeft=t+e*n),!0!==i.options.fade&&!1!==i.options.touchMove&&(!0===i.animating?(i.swipeLeft=null,!1):void i.setCSS(i.swipeLeft))))},r.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},r.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},r.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var e,t=arguments[0],n=Array.prototype.slice.call(arguments,1),i=this.length,o=0;o<i;o++)if("object"==_typeof(t)||void 0===t?this[o].slick=new r(this[o],t):e=this[o].slick[t].apply(this[o].slick,n),void 0!==e)return e;return this}}),$(document).ready(function(){$(".products").slick({arrows:!0,dots:!1,adaptiveHeight:!0,slidesToShow:1,slidesToScroll:1,speed:1e3,easing:"ease",infinite:!0,initialSlide:0,autoplay:!1,autoplaySpeed:5e3,pauseOnFocus:!0,pauseOnHover:!0,pauseOnDotsHover:!0})});var playBtn=document.querySelector(".video__player-img"),soundBtn=document.querySelector(".sound"),playerPlayBtn=document.querySelector(".duration__img");function playStop(){playBtn.classList.toggle("video__player-img--active"),video.paused?(video.play(),intervalId=setInterval(updateDuration,1e3/60),playerPlayBtn.classList.add("active")):(video.pause(),clearInterval(intervalId),playerPlayBtn.classList.remove("active"))}function setVideoDuration(){video.currentTime=durationControl.value,updateDuration()}function updateDuration(){durationControl.value=video.currentTime;var e=video.duration/100,e=video.currentTime/e;durationControl.style.background="linear-gradient(90deg, #E01F3D 0%, #E01F3D ".concat(e,"%, #626262 ").concat(e,"%)")}function soundOf(){0===video.volume?(video.volume=soundLevel,soundControl.value=10*soundLevel,soundBtn.classList.remove("active")):(soundLevel=video.volume,video.volume=0,soundControl.value=0,soundBtn.classList.add("active"))}function changeSoundVolume(){video.volume=soundControl.value/10,0==video.volume?soundBtn.classList.add("active"):soundBtn.classList.remove("active"),console.log("Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ volume Ñ Ð²Ð¸Ð´ÐµÐ¾ "+video.volume),console.log("Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ value Ñ micLevel "+soundControl.value/10)}(video=document.getElementById("player")).addEventListener("loadeddata",function(){video.addEventListener("click",playStop);for(var e=document.querySelectorAll(".play"),t=0;t<e.length;t++)e[t].addEventListener("click",playStop);document.getElementById("mic").addEventListener("click",soundOf),(durationControl=document.getElementById("durationLevel")).addEventListener("input",setVideoDuration),durationControl.min=0,durationControl.value=0,durationControl.max=video.duration,(soundControl=document.getElementById("micLevel")).addEventListener("input",changeSoundVolume),soundControl.min=0,soundControl.max=10,soundControl.value=soundControl.max,video.addEventListener("ended",function(){playBtn.classList.toggle("video__player-img--active"),video.currentTime=0,playerPlayBtn.classList.remove("active")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
